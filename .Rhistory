args_vec
args_vec = at
args_vec = ifelse(args_vec == TRUE, args_vec)
args_vec = ifelse(args_vec == TRUE, 1, args_vec)
args_vec
args_vec = ifelse(args_vec == FALSE, 0, args_vec)
args_vec
cbind(at, args_vec)
View(cbind(at, args_vec))
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
h1d_dat
dir.create(project_path)
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
project.dir
parent.dir
project.name
parent.dir
project_path = file.path(parent.dir, project.name)
dir.create(project_path)
parent.dir
parent_dir = "~/Projects/Water Yield/Hydrus"
project_path = file.path(parent.dir, project.name)
dir.create(project_path)
parent.dir
project.name
parent.dir = parent_dir
project.name
project_path = file.path(parent.dir, project.name)
dir.create(project_path)
discript_file = file.path(project_path, "DISCRIPT.TXT")
h1ddat_file = file.path(project_path, "HYDRUS1D.DAT")
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
args_vec
h1d_args_names
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
h1d_dat
at
args_vec = at
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
h1d_args_names = gsub("[Profile.]", "", h1d_args_names)
h1d_args_names
args_names = names(args_vec)
args_names
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
args_names = names(args_vec)
h1d_args_names
gsub("Profile.", "", h1d_args_names)
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
h1d_args_names = gsub("Profile\\.", "", h1d_args_names)
h1d_args_names
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
h1d_args_names = gsub("Profile\\.", "", h1d_args_names, fixed = TRUE)
h1d_args_names
h1d_args_names = gsub("Profile.", "", h1d_args_names, fixed = TRUE)
h1d_args_names
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
h1d_dat
a = 22
h1d_args_names
at
at = create.H1D.project(project.name = "testprof", parent.dir = project_path, discription = "",
SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
MaterialNumber = 1, SubregionNumber = 1,
,
Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
NumberOfSolutes = 0, InitialCondition = 0,
Profile = c(ProfileDepth = 200, NumberOfNodes = 0,
ObservationNodes = 0))
at
args_vec = at
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
h1d_args_names = gsub("Profile.", "", h1d_args_names, fixed = TRUE)
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
h1d_args_names
a = 15
arg_a = h1d_args_names[a]
arg_a
arg_value = args_vec[arg_a]
arg_value
arg_a
args_vec
args_vec[arg_a]
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
h1d_args_names
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
h1d_args_names
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
h1d_dat
args_vec
args_vec["ProfileDepth"] = format_sci(args_vec["ProfileDepth"], ndec = 1, power.digits = 2)
args_vec["ProfileDepth"] = format.sci(args_vec["ProfileDepth"], ndec = 1, power.digits = 2)
library(hydrusR)
format.sci
?format.sci
hydrusR(format.sci(10, 3, 3))
format.sci(10, 3, 3)
format.sci
format(10, ndec = 3, power.digits = 3)
format.sci(10, ndec = 3, power.digits = 3)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/format_scientific.R', echo=TRUE)
format.scientific(10, ndec = 3, power.digits = 3)
a = format.scientific(10, ndec = 3, power.digits = 3)
toupper(a)
format.scientific("100", 3, 3)
args_vec["ProfileDepth"] = toupper(format.scientific(as.numeric(args_vec["ProfileDepth"]),
ndec = 1, power.digits = 2))
args_vec["ProfileDepth"]
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
# h1d_args_names = gsub("Profile.", "", h1d_args_names, fixed = TRUE)
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
create.H1D.project<-function(prjoect.name, parent.dir, discription = "", ...) {
project_path = file.path(parent.dir, project.name)
discript_file = file.path(project_path, "DISCRIPT.TXT")
h1ddat_file = file.path(project_path, "HYDRUS1D.DAT")
dir.create(project_path)
# SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
# WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
# MaterialNumber = 1, SubregionNumber = 1,
# Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
# NumberOfSolutes = 0, InitialCondition = 0,
# NumberOfNodes, ProfileDepth, ...)
args_vec = (match.call())
args_vec = lapply(args_vec[-1], FUN = function(x) unlist(x))
# args_vec = unlist(unclass(args_vec))
args_vec = do.call("c", args_vec)
args_vec = ifelse(args_vec == TRUE, 1, args_vec)
args_vec = ifelse(args_vec == FALSE, 0, args_vec)
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
args_vec["ProfileDepth"] = toupper(format.scientific(as.numeric(args_vec["ProfileDepth"]),
ndec = 3, power.digits = 3))
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
# h1d_args_names = gsub("Profile.", "", h1d_args_names, fixed = TRUE)
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
return(args_vec)
}
parent_dir = "~/Projects/Water Yield/Hydrus"
create.H1D.project<-function(prjoect.name, parent.dir, discription = NULL, ...) {
project_path = file.path(parent.dir, project.name)
discript_file = file.path(project_path, "DISCRIPT.TXT")
h1ddat_file = file.path(project_path, "HYDRUS1D.DAT")
discription = ifelse(is.null(discription), paste("project title", project.name), discription)
dir.create(project_path)
# SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
# WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
# MaterialNumber = 1, SubregionNumber = 1,
# Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
# NumberOfSolutes = 0, InitialCondition = 0,
# NumberOfNodes, ProfileDepth, ...)
args_vec = (match.call())
args_vec = lapply(args_vec[-1], FUN = function(x) unlist(x))
# args_vec = unlist(unclass(args_vec))
args_vec = do.call("c", args_vec)
args_vec = ifelse(args_vec == TRUE, 1, args_vec)
args_vec = ifelse(args_vec == FALSE, 0, args_vec)
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
args_vec["ProfileDepth"] = toupper(format.scientific(as.numeric(args_vec["ProfileDepth"]),
ndec = 3, power.digits = 3))
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
# h1d_args_names = gsub("Profile.", "", h1d_args_names, fixed = TRUE)
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
}
parent_dir = "~/Projects/Water Yield/Hydrus"
create.H1D.project(project.name = "testproj2", parent.dir = project_path, discription = "",
SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
MaterialNumber = 1, SubregionNumber = 1,
,
Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
NumberOfSolutes = 0, InitialCondition = 0,
Profile = c(ProfileDepth = 200, NumberOfNodes = 0,
ObservationNodes = 0))
create.H1D.project<-function(prjoect.name, parent.dir, discription = NULL, ...) {
project_path = file.path(parent.dir, project.name)
discript_file = file.path(project_path, "DISCRIPT.TXT")
h1ddat_file = file.path(project_path, "HYDRUS1D.DAT")
discription = ifelse(is.null(discription), paste("project title", project.name), discription)
dir.create(project_path)
# SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
# WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
# MaterialNumber = 1, SubregionNumber = 1,
# Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
# NumberOfSolutes = 0, InitialCondition = 0,
# NumberOfNodes, ProfileDepth, ...)
args_vec = (match.call())
args_vec = lapply(args_vec[-1], FUN = function(x) unlist(x))
# args_vec = unlist(unclass(args_vec))
args_vec = do.call("c", args_vec)
args_vec = ifelse(args_vec == TRUE, 1, args_vec)
args_vec = ifelse(args_vec == FALSE, 0, args_vec)
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
args_vec["ProfileDepth"] = toupper(format.scientific(as.numeric(args_vec["ProfileDepth"]),
ndec = 3, power.digits = 3))
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
# h1d_args_names = gsub("Profile.", "", h1d_args_names, fixed = TRUE)
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
}
parent_dir = "~/Projects/Water Yield/Hydrus"
create.H1D.project(project.name = "testproj2", parent.dir = project_path, discription = "",
SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
MaterialNumber = 1, SubregionNumber = 1,
,
Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
NumberOfSolutes = 0, InitialCondition = 0,
Profile = c(ProfileDepth = 200, NumberOfNodes = 0,
ObservationNodes = 0))
project_path = file.path(parent.dir, project.name)
discript_file = file.path(project_path, "DISCRIPT.TXT")
h1ddat_file = file.path(project_path, "HYDRUS1D.DAT")
discription = ifelse(is.null(discription), paste("project title", project.name), discription)
dir.create(project_path)
# SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
# WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
# MaterialNumber = 1, SubregionNumber = 1,
# Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
# NumberOfSolutes = 0, InitialCondition = 0,
# NumberOfNodes, ProfileDepth, ...)
args_vec = (match.call())
args_vec = lapply(args_vec[-1], FUN = function(x) unlist(x))
# args_vec = unlist(unclass(args_vec))
args_vec = do.call("c", args_vec)
args_vec = ifelse(args_vec == TRUE, 1, args_vec)
args_vec = ifelse(args_vec == FALSE, 0, args_vec)
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
args_vec["ProfileDepth"] = toupper(format.scientific(as.numeric(args_vec["ProfileDepth"]),
ndec = 3, power.digits = 3))
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
# h1d_args_names = gsub("Profile.", "", h1d_args_names, fixed = TRUE)
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
at = args_name
args_vec = at
project_path = file.path(parent.dir, project.name)
discript_file = file.path(project_path, "DISCRIPT.TXT")
h1ddat_file = file.path(project_path, "HYDRUS1D.DAT")
discription = ifelse(is.null(discription), paste("project title", project.name), discription)
dir.create(project_path)
# SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
# WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
# MaterialNumber = 1, SubregionNumber = 1,
# Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
# NumberOfSolutes = 0, InitialCondition = 0,
# NumberOfNodes, ProfileDepth, ...)
args_vec = (match.call())
args_vec = lapply(args_vec[-1], FUN = function(x) unlist(x))
# args_vec = unlist(unclass(args_vec))
args_vec = do.call("c", args_vec)
args_vec = ifelse(args_vec == TRUE, 1, args_vec)
args_vec = ifelse(args_vec == FALSE, 0, args_vec)
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
args_vec["ProfileDepth"] = toupper(format.scientific(as.numeric(args_vec["ProfileDepth"]),
ndec = 3, power.digits = 3))
args_names = names(args_vec)
as.numeric(args_vec["ProfileDepth"])
args_vec["ProfileDepth"]
args_vec
at
at = args_vec
at
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/create_H1D_project.R', echo=TRUE)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/create_H1D_project.R', echo=TRUE)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/create_H1D_project.R', echo=TRUE)
at = create.H1D.project(project.name = "testproj2", parent.dir = project_path, discription = "",
SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
MaterialNumber = 1, SubregionNumber = 1,
Unsatchem = F, HP1 = F, EquillibriumAdsorption = F,
NumberOfSolutes = 0, InitialCondition = 0,
Profile = c(ProfileDepth = 200, NumberOfNodes = 0,
ObservationNodes = 0))
at
project_path = file.path(parent.dir, project.name)
discript_file = file.path(project_path, "DISCRIPT.TXT")
h1ddat_file = file.path(project_path, "HYDRUS1D.DAT")
discription = ifelse(is.null(discription), paste("project title", project.name), discription)
dir.create(project_path)
# SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
# WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
# MaterialNumber = 1, SubregionNumber = 1,
# Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
# NumberOfSolutes = 0, InitialCondition = 0,
# NumberOfNodes, ProfileDepth, ...)
args_vec = as.list(match.call())
args_vec = lapply(args_vec[-1], FUN = function(x) unlist(x))
# args_vec = unlist(unclass(args_vec))
args_vec = do.call("c", args_vec)
args_vec = ifelse(args_vec == TRUE, 1, args_vec)
args_vec = ifelse(args_vec == FALSE, 0, args_vec)
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
args_vec["ProfileDepth"] = toupper(format.scientific(as.numeric(args_vec["ProfileDepth"]),
ndec = 3, power.digits = 3))
args_names = names(args_vec)
project_path = file.path(parent.dir, project.name)
discript_file = file.path(project_path, "DISCRIPT.TXT")
h1ddat_file = file.path(project_path, "HYDRUS1D.DAT")
discription = ifelse(is.null(discription), paste("project title", project.name), discription)
dir.create(project_path)
# SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
# WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
# MaterialNumber = 1, SubregionNumber = 1,
# Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
# NumberOfSolutes = 0, InitialCondition = 0,
# NumberOfNodes, ProfileDepth, ...)
args_vec = at
at
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
args_vec["ProfileDepth"] = toupper(format.scientific(as.numeric(args_vec["ProfileDepth"]),
ndec = 3, power.digits = 3))
args_names = names(args_vec)
args_names
args_vec["ProfileDepth"]
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
# h1d_args_names = gsub("Profile.", "", h1d_args_names, fixed = TRUE)
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
discript_vec
discription
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
create.H1D.project<-function(prjoect.name, parent.dir, discription = NULL, ...) {
project_path = file.path(parent.dir, project.name)
discript_file = file.path(project_path, "DISCRIPT.TXT")
h1ddat_file = file.path(project_path, "HYDRUS1D.DAT")
discription = ifelse(is.null(discription), paste("project title", project.name), discription)
dir.create(project_path)
# SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
# WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
# MaterialNumber = 1, SubregionNumber = 1,
# Unsatchem = F, HP1 = F, EquillibriumAdsorptin = F,
# NumberOfSolutes = 0, InitialCondition = 0,
# NumberOfNodes, ProfileDepth, ...)
args_vec = as.list(match.call())
args_vec = lapply(args_vec[-1], FUN = function(x) unlist(x))
# args_vec = unlist(unclass(args_vec))
args_vec = do.call("c", args_vec)
args_vec = ifelse(args_vec == TRUE, 1, args_vec)
args_vec = ifelse(args_vec == FALSE, 0, args_vec)
names(args_vec) = gsub("Profile.", "", names(args_vec), fixed = TRUE)
args_vec["ProfileDepth"] = toupper(format.scientific(as.numeric(args_vec["ProfileDepth"]),
ndec = 3, power.digits = 3))
args_names = names(args_vec)
h1d_args_names = args_names[!(args_names %in% c("project.name", "parent.dir", "discription"))]
# h1d_args_names = gsub("Profile.", "", h1d_args_names, fixed = TRUE)
hydrus1d_template = system.file("templates/HYDRUS1D.DAT", package = "hydrusR")
h1d_dat = readLines(hydrus1d_template, n = -1L, encoding = "unknown")
discript_vec = c("Pcp_File_Version=1", discription)
for(a in 1:length(h1d_args_names)){
arg_a = h1d_args_names[a]
arg_value = args_vec[arg_a]
arg_index = grep(arg_a, h1d_dat)
h1d_dat[arg_index] = paste0(arg_a, "=", arg_value)
}
write(discript_vec, file = discript_file, append = FALSE)
write(h1d_dat, file = h1ddat_file, append = FALSE)
return(args_vec)
}
parent_dir = "~/Projects/Water Yield/Hydrus"
create.H1D.project(project.name = "testproj2", parent.dir = project_path,
discription = "",
SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
MaterialNumber = 1, SubregionNumber = 1,
Unsatchem = F, HP1 = F, EquillibriumAdsorption = F,
NumberOfSolutes = 0, InitialCondition = 0,
Profile = c(ProfileDepth = 200, NumberOfNodes = 0,
ObservationNodes = 0))
h1ddat_file
at = create.H1D.project(project.name = "testproj2", parent.dir = parent_dir,
discription = "",
SpaceUnit = "cm", TimeUnit = "days", PrintTimes = 1,
WaterFlow = T, SoluteTransport = F, RootWaterUptake = F, RootGrowth = F,
MaterialNumber = 1, SubregionNumber = 1,
Unsatchem = F, HP1 = F, EquillibriumAdsorption = F,
NumberOfSolutes = 0, InitialCondition = 0,
Profile = c(ProfileDepth = 200, NumberOfNodes = 0,
ObservationNodes = 0))
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/create_H1D_project.R', echo=TRUE)
?readline
prompt_msg = paste("Folder", project.name, "already exists in the specified directory.\n
Do you still want to creat the HYDRUS1D project in the same location?\n
(All the files will be deleted)")
prompt_msg
readline(prompt = prompt_msg)
Do you still want to creat the HYDRUS1D project in the same location?
(All the files will be deleted)\n")
readline(prompt = prompt_msg)
readline(prompt = prompt_msg)
prompt_msg = paste("Folder", project.name, "already exists\n. All files will be deleted.\n Proceed?\n")
readline(prompt = prompt_msg)
dir_answer = readline(prompt = prompt_msg)
dir_answer
prompt_msg = paste("Folder", project.name, "already exists.\n All files will be deleted.\n Proceed?\n")
dir_answer = readline(prompt = prompt_msg)
dir_answer = readline(prompt = prompt_msg)
dir_answer = readline(prompt = prompt_msg)
prompt_msg
prompt_msg = paste("Folder", project.name, "already exists.All files will be deleted.Proceed?\n")
prompt_msg
dir_answer = readline(prompt = prompt_msg)
dir_answer = readline(prompt = prompt_msg)
prompt_msg
prompt_msg = paste("Folder", project.name, "already exists.All files will be deleted.Proceed? y/n \n")
prompt_msg
dir_answer = readline(prompt = prompt_msg)
dir_answer
