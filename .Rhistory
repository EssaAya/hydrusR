obs_nodes_all = seq(20, zmax_obs, by = 20)
nObsNodes = length(obs_nodes_all)
endTime = 25*24 ### total hours
total_timesteps = endTime/time_step
ntimes = length(1:total_timesteps)
atm_bc_data = atm_bc_data[1:total_timesteps, ]
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
soil_type = "Sand"
const_botbc = T
bot_bc_type = "flux"
# botFlux = rep(c(0.01, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2)/24, each = nrow(atm_bc_data)/10)
# botFlux = rep(c(0.5, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05)/24, each = nrow(atm_bc_data)/10)
###variable bottom head (exponential decay function)
# ab = (1:nrow(atm_bc_data))/24
# botHead = 295*exp(-0.005*ab)
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000 ##### in cm/hr
# atm_bc_data = data.frame(tAtm = seq(time_step, endTime, time_step),
#                   Prec = numeric(ntimes),
#                   rSoil = numeric(ntimes),
#                   rRoot = numeric(ntimes),
#                   hCritA = rep(10000, ntimes),
#                   rB = numeric(ntimes),
#                   hB = numeric(ntimes),
#                   ht = numeric(ntimes),
#                   RootDepth = numeric(ntimes))
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0 *time_step ###
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
# if(const_botbc == TRUE){
#      write.constant.bc(const.bc.type = "flux", bc.value = const_botFlux,
#                     project.path)
# }
#####Apply constant ET boundary conditions
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
# rm(list = ls())
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[rep(seq_len(nrow(atm_bc_data)), each = 4), ]
atm_bc_data$tStep = seq(time_step, endTime, by = time_step)
row.names(atm_bc_data) = NULL
atm_bc_data = dplyr::rename(atm_bc_data, tAtm = tStep)
atm_bc_data =atm_bc_data[1:ntimes, ]
# write.csv("atm_bc_data",
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
initial_profile = readLines(con = file.path(project_path, "PROFILE.DAT"),
n = -1L, encoding = "unknown")
hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0.25, endT = endTime, deltaT = 0.25,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE, soil.para = soil_para,
atm.bc.data = atm_bc_data, ini.wt = 25, rdepth = 120,
obs.nodes = obs_nodes_all, show.output = T)
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, time_step),
Prec = numeric(ntimes),
rSoil = numeric(ntimes),
rRoot = numeric(ntimes),
hCritA = rep(10000, ntimes),
rB = numeric(ntimes),
hB = numeric(ntimes),
ht = numeric(ntimes),
RootDepth = numeric(ntimes))
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0 *time_step ###
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
head(const_et)
head(hourly_et)
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
head(atm_bc_data)
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 4), ] ### for 0.25 time steps
head(hourly_et)
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 4), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/4)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
plto(hourly_et$rSoil[1:96])
plot(hourly_et$rSoil[1:96])
plot(hourly_et$et[1:96])
sum(hourly_et$et[1:96])
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data$tStep = seq(time_step, endTime, by = time_step)
plot(atm_bc_data$tAtm)
tail(atm_bc_data)
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, time_step),
Prec = numeric(ntimes),
rSoil = numeric(ntimes),
rRoot = numeric(ntimes),
hCritA = rep(10000, ntimes),
rB = numeric(ntimes),
hB = numeric(ntimes),
ht = numeric(ntimes),
RootDepth = numeric(ntimes))
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0 *time_step ###
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
# if(const_botbc == TRUE){
#      write.constant.bc(const.bc.type = "flux", bc.value = const_botFlux,
#                     project.path)
# }
#####Apply constant ET boundary conditions
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 4), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/4)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
# rm(list = ls())
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
# atm_bc_data$tStep = seq(time_step, endTime, by = time_step)
row.names(atm_bc_data) = NULL
head(atm_bc_data)
tail(atm_bc_data)
atm_bc_data = atm_bc_data[1:ntimes, ]
rm(list = ls())
rootPath = paste("C:/Users/sacharya/Documents/Projects/Water Yield/Hydrus") ## need to change this directory accordingly
project_name = "testproj3"
project_path = file.path(rootPath, project_name)
library(hydrusR)
zmax_obs = 300
library(data.table)
library(dplyr)
soil_data = read.csv(file = file.path(rootPath, "soilParameters_VG_original.csv"),
header = T)
row.names(soil_data) = soil_data$Soil
profile_depth = 300
deltaz = 1
profile_nodes = seq(0, profile_depth, by = deltaz)
time_step = 0.25
max_tstep = 1000
sunit = "cm"
tunit = "hours"
pTimes = 1
# obs_nodes = seq(5, zmax_obs, by = 5) #### observation points in cm
root_depth = 210
obs_nodes_all = seq(20, zmax_obs, by = 20)
nObsNodes = length(obs_nodes_all)
endTime = 25*24 ### total hours
total_timesteps = endTime/time_step
ntimes = length(1:total_timesteps)
atm_bc_data = atm_bc_data[1:total_timesteps, ]
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
soil_type = "Sand"
const_botbc = T
bot_bc_type = "flux"
# botFlux = rep(c(0.01, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2)/24, each = nrow(atm_bc_data)/10)
# botFlux = rep(c(0.5, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05)/24, each = nrow(atm_bc_data)/10)
###variable bottom head (exponential decay function)
# ab = (1:nrow(atm_bc_data))/24
# botHead = 295*exp(-0.005*ab)
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000 ##### in cm/hr
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, time_step),
Prec = numeric(ntimes),
rSoil = numeric(ntimes),
rRoot = numeric(ntimes),
hCritA = rep(10000, ntimes),
rB = numeric(ntimes),
hB = numeric(ntimes),
ht = numeric(ntimes),
RootDepth = numeric(ntimes))
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0 *time_step ###
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
# if(const_botbc == TRUE){
#      write.constant.bc(const.bc.type = "flux", bc.value = const_botFlux,
#                     project.path)
# }
#####Apply constant ET boundary conditions
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 4), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/4)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
# rm(list = ls())
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
# atm_bc_data$tStep = seq(time_step, endTime, by = time_step)
row.names(atm_bc_data) = NULL
atm_bc_data = atm_bc_data[1:ntimes, ]
create.H1D.project(project.name = "testproj4", parent.dir = rootPath,
TimeUnit = tunit, PrintTimes = pTimes,
processes = c("WaterFlow = T", "RootWaterUptake = T"),
geometry = c(ProfileDepth = profile_depth,
NumberOfNodes = length(profile_nodes),
ObservationNodes = nObsNodes))
library(hydrusR)
create.H1D.project(project.name = "testproj4", parent.dir = rootPath,
TimeUnit = tunit, PrintTimes = pTimes,
processes = c("WaterFlow = T", "RootWaterUptake = T"),
geometry = c(ProfileDepth = profile_depth,
NumberOfNodes = length(profile_nodes),
ObservationNodes = nObsNodes))
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
initial_profile = readLines(con = file.path(project_path, "PROFILE.DAT"),
n = -1L, encoding = "unknown")
hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
create.H1D.project(project.name = project_name, parent.dir = rootPath,
TimeUnit = tunit, PrintTimes = pTimes,
processes = c("WaterFlow = T", "RootWaterUptake = T"),
geometry = c(ProfileDepth = profile_depth,
NumberOfNodes = length(profile_nodes),
ObservationNodes = nObsNodes))
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
initial_profile = readLines(con = file.path(project_path, "PROFILE.DAT"),
n = -1L, encoding = "unknown")
hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0.25, endT = endTime, deltaT = 0.25,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE, soil.para = soil_para,
atm.bc.data = atm_bc_data, ini.wt = 25, rdepth = 120,
obs.nodes = obs_nodes_all, show.output = T)
source('~/Projects/Water Yield/Hydrus/hydrusR/run_hydrus_2.R', echo=TRUE)
source('~/Projects/Water Yield/Hydrus/hydrusR/run_hydrus_2.R', echo=TRUE)
source('~/Projects/Water Yield/Hydrus/hydrusR/run_hydrus_2.R', echo=TRUE)
library(hydrusR)
install.packages("dplyr")
rm(list = ls())
rootPath = paste("C:/Users/sacharya/Documents/Projects/Water Yield/Hydrus") ## need to change this directory accordingly
project_name = "testproj6"
project_path = file.path(rootPath, project_name)
library(hydrusR)
zmax_obs = 300
library(data.table)
library(dplyr)
soil_data = read.csv(file = file.path(rootPath, "soilParameters_VG_original.csv"),
header = T)
row.names(soil_data) = soil_data$Soil
profile_depth = 200
deltaz = 1
profile_nodes = seq(0, profile_depth, by = deltaz)
time_step = 1.0
sunit = "cm"
tunit = "hours"
pTimes = 1
# obs_nodes = seq(5, zmax_obs, by = 5) #### observation points in cm
root_depth = 210
obs_nodes_all = seq(20, zmax_obs, by = 20)
nObsNodes = length(obs_nodes_all)
endTime = 10*24 ### total hours
total_timesteps = endTime/time_step
ntimes = length(1:total_timesteps)
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
soil_type = "Sand"
const_botbc = T
bot_bc_type = "flux"
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, time_step),
Prec = numeric(ntimes),
rSoil = numeric(ntimes),
rRoot = numeric(ntimes),
hCritA = rep(10000, ntimes),
rB = numeric(ntimes),
hB = numeric(ntimes),
ht = numeric(ntimes),
RootDepth = numeric(ntimes))
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000 ##### in cm/hr
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0 *time_step ###
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
# if(const_botbc == TRUE){
#      write.constant.bc(const.bc.type = "flux", bc.value = const_botFlux,
#                     project.path)
# }
#####Apply constant ET boundary conditions
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 1/time_step), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/(1/time_step))
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
# rm(list = ls())
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
# atm_bc_data$tStep = seq(time_step, endTime, by = time_step)
row.names(atm_bc_data) = NULL
atm_bc_data = atm_bc_data[1:ntimes, ]
project.path = project_path
hydrus.path = hydrus_path
profile.depth = profile_depth
beginT = 1
endT = endTime
deltaT = time_step
bot.bc.type = bot_bc_type
bot.bc.value = const_botFlux
const.bot.bc = TRUE
soil.para = soil_para
atm.bc.data = atm_bc_data
ini.wt = 25
rdepth = 120
obs.nodes = obs_nodes_all
show.output = T
project.path = project_path
if(is.null(hydrus.path)|missing(hydrus.path)){
hydrus.path = "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
}
# write(initial_profile, file = file.path(project.path, "INI_PROFILE.DAT"), append = F)
maxTp = endT/deltaT
times_s = seq(beginT, endT, by = deltaT)
prev_sims = dir(project.path, pattern = "sim", full.names = T)
if(length(prev_sims > 0)){
mapply(FUN = unlink, prev_sims, recursive = T, force = T)
}
write.ini.cond(project.path, profile.depth = profile.depth, wt.depth = ini.wt)
write.root.dist(project.path,  rdepth = rdepth, rbeta = 0.962)
write.obs.nodes(project.path, Z = profile.depth, dz = deltaz,
obs.nodes = obs.nodes)
write.hydraulic.para(project.path, para = soil.para)
write.bottom.bc(constant.bc = const.bot.bc, bc.type = bot.bc.type,
bc.value = bot.bc.value, project.path = project.path)
write.atmosph.in(project.path, maxAL = maxTp, deltaT = deltaT,
atm.bc.data = atm.bc.data[1:maxTp, ])
write.print.times(project.path, tmin = beginT, tmax = endT, tstep = deltaT)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/write_print_times.R', echo=TRUE)
write.print.times(project.path, tmin = beginT, tmax = endT, tstep = deltaT)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/write_print_times.R', echo=TRUE)
write.print.times(project.path, tmin = beginT, tmax = endT, tstep = deltaT)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/write_print_times.R', echo=TRUE)
write.print.times(project.path, tmin = beginT, tmax = endT, tstep = deltaT)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/write_print_times.R', echo=TRUE)
write.print.times(project.path, tmin = beginT, tmax = endT,
tstep = deltaT, TimeUnit = TimeUnit)
TimeUnit
tunit
TimeUnit
TimeUnit = tunit
TimeUnit
write.print.times(project.path, tmin = beginT, tmax = endT,
tstep = deltaT, TimeUnit = TimeUnit)
call.H1D(project.path, hydrus.path = hydrus.path, show.output = show.output)
hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
tunit
call.H1D(project.path, hydrus.path = hydrus.path, show.output = show.output)
hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
call.H1D(project.path, hydrus.path = hydrus.path, show.output = show.output)
project.path = project_path
hydrus.path = hydrus_path
profile.depth = profile_depth
beginT = 1
endT = endTime
deltaT = time_step
bot.bc.type = bot_bc_type
bot.bc.value = const_botFlux
const.bot.bc = TRUE
soil.para = soil_para
atm.bc.data = atm_bc_data
ini.wt = 25
TimeUnit = tunit
rdepth = 120
obs.nodes = obs_nodes_all
show.output = T
project.path = project_path
call.H1D(project.path, hydrus.path = hydrus.path, show.output = show.output)
call.H1D(project.path, hydrus.path = hydrus.path, show.output = show.output)
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = time_step,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE, soil.para = soil_para,
atm.bc.data = atm_bc_data, ini.wt = 25, TimeUnit = tunit,
rdepth = 120,
obs.nodes = obs_nodes_all, show.output = T)
write.print.times(project.path, tmin = deltaT, tmax = 960*deltaT, tstep = deltaT)
project.path = project_path
hydrus.path = hydrus_path
profile.depth = profile_depth
beginT = 0
endT = endTime
deltaT = time_step
bot.bc.type = bot_bc_type
bot.bc.value = const_botFlux
const.bot.bc = TRUE
soil.para = soil_para
atm.bc.data = atm_bc_data
ini.wt = 25
TimeUnit = tunit
rdepth = 120
obs.nodes = obs_nodes_all
show.output = T
project.path = project_path
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/write_print_times.R', echo=TRUE)
write.print.times(project.path, tmin = deltaT, tmax = 960*deltaT, tstep = deltaT)
write.print.times(project.path, tmin = deltaT, tmax = endT,
tstep = deltaT, TimeUnit = TimeUnit)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/write_print_times.R', echo=TRUE)
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = time_step,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE, soil.para = soil_para,
atm.bc.data = atm_bc_data, ini.wt = 25, TimeUnit = tunit,
rdepth = 120,
obs.nodes = obs_nodes_all, show.output = T)
