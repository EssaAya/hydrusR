alevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 2, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
head(alevel_out)
tlevel_out2 = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 2, header = T)
head(alevel_out2)
head(tlevel_out2)
alevel_out =  apply(alevel_out, MARGIN = 2, FUN = as.numeric)
alevel_out = na.omit(alevel_out)
alevel_out = data.frame(alevel_out, check.names = FALSE, row.names = NULL)
at = alevel_out
alevel_out2 = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 2, header = T)
alevel_out =  apply(alevel_out, MARGIN = 2, FUN = as.numeric)
alevel_out = na.omit(alevel_out)
alevel_out = data.frame(alevel_out, check.names = FALSE, row.names = NULL)
identical(alevel_out, at)
alevel_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 2, header = T)
alevel_out =  apply(alevel_out, MARGIN = 2, FUN = as.numeric)
alevel_out = na.omit(alevel_out)
alevel_out = data.frame(alevel_out, check.names = FALSE, row.names = NULL)
astart_ind = which(alevel_out$`A-level` == 1)
sum_cols_ind = grep("sum", names(alevel_out))
sum_col_names = names(alevel_out)[sum_cols_ind]
for(i in 2: length(astart_ind)){
run1_totals = alevel_out[(astart_ind[i]-1), sum_cols_ind]
if(i == length(astart_ind)){
run_i_ind = astart_ind[i]:nrow(alevel_out)
} else {
run_i_ind = astart_ind[i]:(astart_ind[i+1]-1)
}
aout_j = alevel_out[run_i_ind, ]
for(j in sum_col_names) {
alevel_out[run_i_ind, j] = aout_j[, j] + run1_totals[[j]]
}
}
head(alevel_out)
plot(hTop~Time, alevel_out)
plot(hRoot~Time, alevel_out)
View(alevel_out)
alevel_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 2, header = T)
alevel_out =  apply(alevel_out, MARGIN = 2, FUN = as.numeric)
alevel_out = na.omit(alevel_out)
alevel_out = data.frame(alevel_out, check.names = FALSE, row.names = NULL)
astart_ind = which(alevel_out$`A-level` == 1)
sum_cols_ind = grep("sum", names(alevel_out))
sum_col_names = names(alevel_out)[sum_cols_ind]
View(alevel_out)
sum_col_names
for(i in 2: length(astart_ind)){
run1_totals = alevel_out[(astart_ind[i]-1), sum_cols_ind]
if(i == length(astart_ind)){
run_i_ind = astart_ind[i]:nrow(alevel_out)
} else {
run_i_ind = astart_ind[i]:(astart_ind[i+1]-1)
}
aout_j = alevel_out[run_i_ind, ]
for(j in sum_col_names) {
alevel_out[run_i_ind, j] = aout_j[, j] + run1_totals[[j]]
}
}
head(alevel_out)
plot(`sum(rTop)`~Time, alevel_out)
plot(`sum(vTop)`~Time, alevel_out)
library(hydrusR)
library(data.table)
library(dplyr)
## Basic inputs
profile_depth = 200
ntimes = 3000
tstep = 1
deltaz = 1
rdepth = 100
time_step = 1
soil_para = list(thr = 0.045, ths = 0.43,
Alfa = 0.145, n = 2.69,Ks = 29.7, l = 0.45)
# hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
hydrus_path = "/home/sacharya/.PlayOnLinux/wineprefix/Hydrus_1D/drive_c/Program Files/PC-Progress/Hydrus-1D 4.xx"
project_name = "h1dExample"
parent_dir = path.expand("~")
project_path = path.expand(file.path(parent_dir, project_name))
## Basic inputs
TimeUnit = "cm" ## Space units
SpaceUnit = "hours" ## time units
PrintTimes = 1
show_output = T
##Process inputs
rwu = T   ###  rootwater uptake
##Profile/geometry inputs
profile_nodes = seq(0, profile_depth, by = deltaz)
initial_wtable = 30
obs_nodes_all = seq(20, profile_depth, by = 20)
nObsNodes = length(obs_nodes_all)
rooting_depth = 120
### Time inputs
endTime = ntimes ### total time steps
total_timesteps = endTime/tstep
ntimesteps = length(1:total_timesteps)
## LAI and pet
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
## Boundary conditions inputs
const_botbc = TRUE
bot_bc_type = "flux"
const_botFlux = 0.0000 ##### in cm/hr
### Atmospheric top boundary conditions
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, tstep),
Prec = numeric(ntimesteps),
rSoil = numeric(ntimesteps),
rRoot = numeric(ntimesteps),
hCritA = rep(10000, ntimesteps),
rB = numeric(ntimesteps),
hB = numeric(ntimesteps),
ht = numeric(ntimesteps),
RootDepth = numeric(ntimesteps))
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 1/time_step), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/(1/time_step))
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[1:ntimesteps, ]
#### Creates a blank hydrus project with three files
create.H1D.project(project.name = project_name, parent.dir = parent_dir,
TimeUnit = TimeUnit, PrintTimes = PrintTimes,
processes = c(WaterFlow = T, RootWaterUptake = rwu),
geometry = c(ProfileDepth = profile_depth,
NumberOfNodes = length(profile_nodes),
ObservationNodes = nObsNodes))
### create the soil profile (PROFILE.DAT) info
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
write.ini.cond(project.path = project_path, wt.depth = initial_wtable)
write.root.dist(project.path = project_path,  rdepth = rooting_depth, rbeta = 0.962)
write.hydraulic.para(project.path = project_path, para = soil_para)
write.bottom.bc(constant.bc = TRUE, bc.type = bot_bc_type,
bc.value = const_botFlux, project.path = project_path)
##### Default hydrus path in Windows
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = tstep,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE,atm.bc.data = atm_bc_data, TimeUnit = TimeUnit,
show.output = show_output)
library(hydrusR)
library(data.table)
library(dplyr)
## Basic inputs
profile_depth = 200
ntimes = 3000
tstep = 1
deltaz = 1
rdepth = 100
time_step = 1
soil_para = list(thr = 0.045, ths = 0.43,
Alfa = 0.145, n = 2.69,Ks = 29.7, l = 0.45)
# hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
hydrus_path = "/home/sacharya/.PlayOnLinux/wineprefix/Hydrus_1D/drive_c/Program Files/PC-Progress/Hydrus-1D 4.xx"
project_name = "h1dExample"
parent_dir = path.expand("~")
project_path = path.expand(file.path(parent_dir, project_name))
## Basic inputs
TimeUnit = "cm" ## Space units
SpaceUnit = "hours" ## time units
PrintTimes = 1
show_output = T
profile_nodes = seq(0, profile_depth, by = deltaz)
initial_wtable = 30
obs_nodes_all = seq(20, profile_depth, by = 20)
nObsNodes = length(obs_nodes_all)
rooting_depth = 120
### Time inputs
endTime = ntimes ### total time steps
total_timesteps = endTime/tstep
ntimesteps = length(1:total_timesteps)
## LAI and pet
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
## Boundary conditions inputs
const_botbc = TRUE
bot_bc_type = "flux"
const_botFlux = 0.0000 ##### in cm/hr
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, tstep),
Prec = numeric(ntimesteps),
rSoil = numeric(ntimesteps),
rRoot = numeric(ntimesteps),
hCritA = rep(10000, ntimesteps),
rB = numeric(ntimesteps),
hB = numeric(ntimesteps),
ht = numeric(ntimesteps),
RootDepth = numeric(ntimesteps))
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 1/time_step), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/(1/time_step))
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[1:ntimesteps, ]
project.path = project_path
smr_models<- c("van Genuchten (VG)","mod van Genuchten (VGM)",
"Brooks Corey(BC)","van Genuchten 6 para (VGM2)",
"Kosugi(KOS)","dual Porosity (DUR)","dual porosity 2 (DUR2)",
"dual porosity 3 (DUR3)","dual permeability (DUP)")
hydraulic_models <- data.frame(code = c(0:7, 9),
model = smr_models)
hydraulic_models
flow_block = input_data[flow_block_ind : (time_block_ind - 1)]
model_line_ind = grep("Model", flow_block)
input_data = readLines(con = file.path(project.path, "SELECTOR.IN"),
n = -1L, encoding = "unknown")
flow_block = input_data[flow_block_ind : (time_block_ind - 1)]
model_line_ind = grep("Model", flow_block)
basic_inf_ind  = grep("BLOCK A", input_data)
flow_block_ind = grep("BLOCK B", input_data)
time_block_ind = grep("BLOCK C", input_data)
rwu_block_ind  = grep("BLOCK G", input_data)
flow_block = input_data[flow_block_ind : (time_block_ind - 1)]
model_line_ind = grep("Model", flow_block)
flow_block
model_line_ind
hydraulic_models
soil_para
hydraulic_models
para_name_list = list(VG = c("thr", "ths", "Alfa", "n", "Ks", "l"),
VGM = c("thr", "ths", "Alfa", "n", "Ks", "l", "thm", "tha", "thk", "Kk"),
BC = c("thr", "ths", "Alfa", "n", "Ks", "l"),
VGM2 = c("thr", "ths", "Alfa", "n", "Ks", "l"),
KOS = c("thr", "ths", "Alfa", "n", "Ks", "l"),
DUR = c("thr", "ths", "Alfa", "n", "Ks", "l"),
DUR2 = c("thr", "ths", "Alfa", "n", "Ks", "l"),
DUR3 = c("thr", "ths", "Alfa", "n", "Ks", "l"),
DUP = c("thr", "ths", "Alfa", "n", "Ks", "l"))
para_name_list
library(hydrusR)
library(data.table)
library(dplyr)
## Basic inputs
profile_depth = 200
ntimes = 3000
tstep = 1
deltaz = 1
rdepth = 100
time_step = 1
soil_para = list(thr = 0.045, ths = 0.43,
Alfa = 0.145, n = 2.69,Ks = 29.7, l = 0.45)
# hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
hydrus_path = "/home/sacharya/.PlayOnLinux/wineprefix/Hydrus_1D/drive_c/Program Files/PC-Progress/Hydrus-1D 4.xx"
project_name = "h1dExample"
parent_dir = path.expand("~")
project_path = path.expand(file.path(parent_dir, project_name))
## Basic inputs
TimeUnit = "cm" ## Space units
SpaceUnit = "hours" ## time units
PrintTimes = 1
show_output = T
project.path = project_path
smr_models<- c("van Genuchten (VG)","van Genuchten 6 para (VGM)",
"Brooks Corey(BC)","mod van Genuchten (VGM2)",
"Kosugi(KOS)","dual Porosity (DUR)","dual porosity 2 (DUR2)",
"dual porosity 3 (DUR3)","dual permeability (DUP)")
hydraulic_models <- data.frame(code = c(0:7, 9),
model = smr_models)
para_name_list = list(VG = c("thr", "ths", "Alfa", "n", "Ks", "l"),
VGM = c("thr", "ths", "Alfa", "n", "Ks", "l", "thm", "tha", "thk", "Kk"),
BC = c("thr", "ths", "Alfa", "n", "Ks", "l"),
VGM2 = c("thr", "ths", "Alfa", "n", "Ks", "l"),
KOS = c("thr", "ths", "Alfa", "n", "Ks", "l"),
DUR = c("thr", "ths", "Alfa", "n", "Ks", "l"),
DUR2 = c("thr", "ths", "Alfa", "n", "Ks", "l"),
DUR3 = c("thr", "ths", "Alfa", "n", "Ks", "l"),
DUP = c("thr", "ths", "Alfa", "n", "Ks", "l"))
input_data = readLines(con = file.path(project.path, "SELECTOR.IN"),
n = -1L, encoding = "unknown")
basic_inf_ind  = grep("BLOCK A", input_data)
flow_block_ind = grep("BLOCK B", input_data)
time_block_ind = grep("BLOCK C", input_data)
rwu_block_ind  = grep("BLOCK G", input_data)
flow_block = input_data[flow_block_ind : (time_block_ind - 1)]
model_line_ind = grep("Model", flow_block)
model_line_ind
model_line = flow_block[model_line_ind + 1]
model_line
source('~/Google Drive/R/RPackages/hydrusR/inst/examples/h1d_flow_example.R')
profile_depth = 200
ntimes = 1200
tstep = 1
deltaz = 1
rdepth = 100
time_step = 1
soil_para = list(thr = 0.045, ths = 0.43,
Alfa = 0.145, n = 2.69,Ks = 29.7, l = 0.45)
smr_model = 2
# hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
hydrus_path = "/home/sacharya/.PlayOnLinux/wineprefix/Hydrus_1D/drive_c/Program Files/PC-Progress/Hydrus-1D 4.xx"
## Basic inputs
TimeUnit = "cm" ## Space units
SpaceUnit = "hours" ## time units
PrintTimes = 1
show_output = T
##Process inputs
rwu = T   ###  rootwater uptake
##Profile/geometry inputs
profile_nodes = seq(0, profile_depth, by = deltaz)
initial_wtable = 30
obs_nodes_all = seq(20, profile_depth, by = 20)
nObsNodes = length(obs_nodes_all)
rooting_depth = 120
### Time inputs
endTime = ntimes ### total time steps
total_timesteps = endTime/tstep
ntimesteps = length(1:total_timesteps)
## LAI and pet
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
## Boundary conditions inputs
const_botbc = TRUE
bot_bc_type = "flux"
const_botFlux = 0.0000 ##### in cm/hr
### Atmospheric top boundary conditions
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, tstep),
Prec = numeric(ntimesteps),
rSoil = numeric(ntimesteps),
rRoot = numeric(ntimesteps),
hCritA = rep(10000, ntimesteps),
rB = numeric(ntimesteps),
hB = numeric(ntimesteps),
ht = numeric(ntimesteps),
RootDepth = numeric(ntimesteps))
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 1/time_step), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/(1/time_step))
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[1:ntimesteps, ]
library(hydrusR)
library(data.table)
library(dplyr)
project_name = "testproj1"
parent_dir = path.expand("~/Documents")
project_path = path.expand(file.path(parent_dir, project_name))
## Basic inputs
profile_depth = 200
ntimes = 1200
tstep = 1
deltaz = 1
rdepth = 100
time_step = 1
soil_para = list(thr = 0.045, ths = 0.43,
Alfa = 0.145, n = 2.69,Ks = 29.7, l = 0.45)
smr_model = 2
# hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
hydrus_path = "/home/sacharya/.PlayOnLinux/wineprefix/Hydrus_1D/drive_c/Program Files/PC-Progress/Hydrus-1D 4.xx"
## Basic inputs
TimeUnit = "cm" ## Space units
SpaceUnit = "hours" ## time units
PrintTimes = 1
show_output = T
##Process inputs
rwu = T   ###  rootwater uptake
##Profile/geometry inputs
profile_nodes = seq(0, profile_depth, by = deltaz)
initial_wtable = 30
obs_nodes_all = seq(20, profile_depth, by = 20)
nObsNodes = length(obs_nodes_all)
rooting_depth = 120
### Time inputs
endTime = ntimes ### total time steps
total_timesteps = endTime/tstep
ntimesteps = length(1:total_timesteps)
## LAI and pet
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
## Boundary conditions inputs
const_botbc = TRUE
bot_bc_type = "flux"
const_botFlux = 0.0000 ##### in cm/hr
### Atmospheric top boundary conditions
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, tstep),
Prec = numeric(ntimesteps),
rSoil = numeric(ntimesteps),
rRoot = numeric(ntimesteps),
hCritA = rep(10000, ntimesteps),
rB = numeric(ntimesteps),
hB = numeric(ntimesteps),
ht = numeric(ntimesteps),
RootDepth = numeric(ntimesteps))
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 1/time_step), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/(1/time_step))
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[1:ntimesteps, ]
### create the soil profile (PROFILE.DAT) info
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
write.ini.cond(project.path = project_path, wt.depth = initial_wtable)
write.root.dist(project.path = project_path,  rdepth = rooting_depth, rbeta = 0.962)
write.hydraulic.para(project.path = project_path, model = 1, para = soil_para)
write.bottom.bc(constant.bc = TRUE, bc.type = bot_bc_type,
bc.value = const_botFlux, project.path = project_path)
smr_model
soil_para
write.hydraulic.para(project.path = project_path, model = smr_model, para = soil_para)
write.bottom.bc(constant.bc = TRUE, bc.type = bot_bc_type,
bc.value = const_botFlux, project.path = project_path)
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = tstep,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE,atm.bc.data = atm_bc_data, TimeUnit = TimeUnit,
show.output = show_output)
source('~/Google Drive/R/RPackages/hydrusR/inst/examples/h1d_flow_example.R')
getwd()
project_path
list.files(project_path)
readLines(error_file)
error_file = file.path(project.path, "Error.msg")
project.path = projrect_path
project.path = project_path
error_file = file.path(project.path, "Error.msg")
readLines(error_file)
at = readLines(error_file)
do.call(paste0, at)
paste0(at)
paste0(at, collapse = "")
at = readLines(error_file)
at
error_file = file.path(project.path, "Error.msg")
if(file.exists(error_file))  file.remove(error_file)
library(hydrusR)
source('~/Google Drive/R/RPackages/hydrusR/inst/examples/h1d_flow_example.R')
source('~/Google Drive/R/RPackages/hydrusR/R/run_H1D_simulation.R')
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = tstep,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE,atm.bc.data = atm_bc_data, TimeUnit = TimeUnit,
show.output = show_output)
source('~/Google Drive/R/RPackages/hydrusR/R/run_H1D_simulation.R')
library(hydrusR)
source('~/Google Drive/R/RPackages/hydrusR/inst/examples/h1d_flow_example.R')
source('~/Google Drive/R/RPackages/hydrusR/inst/examples/h1d_flow_example.R')
source('~/Google Drive/R/RPackages/hydrusR/R/run_H1D_simulation.R')
y
library(hydrusR)
source('~/Google Drive/R/RPackages/hydrusR/inst/examples/h1d_flow_example.R')
library(hydrusR)
source('~/Google Drive/R/RPackages/hydrusR/inst/examples/h1d_flow_example.R')
library(hydrusR)
