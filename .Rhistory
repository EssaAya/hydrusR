} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
head(atm_bc_data)
plot(rSoil~tStep, atm_bc_data)
View(tStep)
plot(atm_bc_data$tStep)
head(hourly_et)
dim(hourly_et)
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
plot(rSoil~tStep, atm_bc_data)
plot(hourly_et$rSoil)
hourly_et =  et.hourly(Et.Daily = const_et)
head(hourly_et)
dim(hourly_et)
plot(hourly_et)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
plot(hourly_et$hour, hourly_et$rSoil)
dim(hourly_et)
plot(hourly_et$rSoil)
View(hourly_et)
str(hourly_et)
plot(1:nrow(hourly_et), hourly_et$rSoil)
plot(hourly_et[1:24, "rSoil"])
plot(hourly_et[25:48, "rSoil"])
plot(hourly_et[3865:3888, "rSoil"])
plot(hourly_et$rSoil)
plot(hourly_et$rSoil, type = "l")
plot(hourly_et$rSoil[1:200], type = "l")
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
# rm(list = ls())
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[rep(seq_len(nrow(atm_bc_data)), each = 4), ]
atm_bc_data$tStep = seq(time_step, endTime, by = time_step)
row.names(atm_bc_data) = NULL
atm_bc_data = dplyr::rename(atm_bc_data, tAtm = tStep)
head(atm_bc_data)
plot(rSoil~tAtm, atm_bc_data[1:500, ], type = "l")
View(atm_bc_data)
sum(atm_bc_data$rSoil[1:96])
const_botbc = FALSE
bot_bc_type = "flux"
# botFlux = rep(c(0.01, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2)/24, each = nrow(atm_bc_data)/10)
# botFlux = rep(c(0.5, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05)/24, each = nrow(atm_bc_data)/10)
###variable bottom head (exponential decay function)
# ab = (1:nrow(atm_bc_data))/24
# botHead = 295*exp(-0.005*ab)
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000 ##### in cm/hr
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0 *time_step ###
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
# if(const_botbc == TRUE){
#      write.constant.bc(const.bc.type = "flux", bc.value = const_botFlux,
#                     project.path)
# }
#####Apply constant ET boundary conditions
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
head(hourly_et)
sum(hourly_et[1:24])
sum(hourly_et[1:24, ])
sum(hourly_et[1:24, 1])
sum(hourly_et[1:24, 2])
sum(hourly_et[1:24, 3])
sum(hourly_et[1:24, 4])
sum(hourly_et[1:24, 5])
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
head(atm_bc_data)
const_botbc
bot_bc_type
const_botFlux
const_botbc
atm_bc_data = read.csv(file.path(rootPath, "atm_bc_data.csv"), header = TRUE)
et_data = read.csv(file.path(rootPath, "pot_et_2010_hastings.csv"), header = T)
soil_data = read.csv(file = file.path(rootPath, "soilParameters_VG_original.csv"),
header = T)
row.names(soil_data) = soil_data$Soil
head(atm_bc_data)
plot(atm_bc_data$rB)
profile_depth = 300
deltaz = 1
time_step = 0.25
max_tstep = 960
# obs_nodes = seq(5, zmax_obs, by = 5) #### observation points in cm
zmax_obs = 300
library(data.table)
library(readr)
root_depth = 210
obs_nodes_all = seq(5, zmax_obs, by = 20)
endTime = 365*24 ### total hours
total_timesteps = endTime/time_step
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
soil_type = "Sand"
const_botbc = FALSE
bot_bc_type = "flux"
# botFlux = rep(c(0.01, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2)/24, each = nrow(atm_bc_data)/10)
# botFlux = rep(c(0.5, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05)/24, each = nrow(atm_bc_data)/10)
###variable bottom head (exponential decay function)
# ab = (1:nrow(atm_bc_data))/24
# botHead = 295*exp(-0.005*ab)
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000 ##### in cm/hr
const_botbc = T
bot_bc_type = "flux"
# botFlux = rep(c(0.01, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2)/24, each = nrow(atm_bc_data)/10)
# botFlux = rep(c(0.5, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05)/24, each = nrow(atm_bc_data)/10)
###variable bottom head (exponential decay function)
# ab = (1:nrow(atm_bc_data))/24
# botHead = 295*exp(-0.005*ab)
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000 ##### in cm/hr
botFlux
head(botFlux)
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000 ##### in cm/hr
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0 *time_step ###
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
# if(const_botbc == TRUE){
#      write.constant.bc(const.bc.type = "flux", bc.value = const_botFlux,
#                     project.path)
# }
#####Apply constant ET boundary conditions
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[rep(seq_len(nrow(atm_bc_data)), each = 4), ]
atm_bc_data$tStep = seq(time_step, endTime, by = time_step)
row.names(atm_bc_data) = NULL
atm_bc_data = dplyr::rename(atm_bc_data, tAtm = tStep)
head(atm_bc_data)
create.soil.profile(project.path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = 1)
initial_profile = readLines(con = file.path(project.path, "PROFILE.DAT"),
n = -1L, encoding = "unknown")
def_hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
const_botbc
bot_bc_type
botFlux
const_botbc
rm(list = ls())
rootPath = paste("C:/Users/sacharya/Documents/Projects/Water Yield/Hydrus") ## need to change this directory accordingly
project_folder = "wt_fluctuation"
project.path = file.path(rootPath, project_folder)
library(hydrusR)
atm_bc_data = read.csv(file.path(rootPath, "atm_bc_data.csv"), header = TRUE)
et_data = read.csv(file.path(rootPath, "pot_et_2010_hastings.csv"), header = T)
soil_data = read.csv(file = file.path(rootPath, "soilParameters_VG_original.csv"),
header = T)
row.names(soil_data) = soil_data$Soil
profile_depth = 300
deltaz = 1
time_step = 0.25
max_tstep = 960
# obs_nodes = seq(5, zmax_obs, by = 5) #### observation points in cm
zmax_obs = 300
library(data.table)
library(readr)
root_depth = 210
obs_nodes_all = seq(5, zmax_obs, by = 20)
endTime = 365*24 ### total hours
total_timesteps = endTime/time_step
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
soil_type = "Sand"
const_botbc = T
bot_bc_type = "flux"
# botFlux = rep(c(0.01, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2)/24, each = nrow(atm_bc_data)/10)
# botFlux = rep(c(0.5, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05)/24, each = nrow(atm_bc_data)/10)
###variable bottom head (exponential decay function)
# ab = (1:nrow(atm_bc_data))/24
# botHead = 295*exp(-0.005*ab)
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000 ##### in cm/hr
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0 *time_step ###
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
# if(const_botbc == TRUE){
#      write.constant.bc(const.bc.type = "flux", bc.value = const_botFlux,
#                     project.path)
# }
#####Apply constant ET boundary conditions
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
# rm(list = ls())
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[rep(seq_len(nrow(atm_bc_data)), each = 4), ]
atm_bc_data$tStep = seq(time_step, endTime, by = time_step)
row.names(atm_bc_data) = NULL
atm_bc_data = dplyr::rename(atm_bc_data, tAtm = tStep)
# write.csv("atm_bc_data",
#          file = file.path(project.path, "atm_bc_data.csv"), row.names = F)
create.soil.profile(project.path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = 1)
initial_profile = readLines(con = file.path(project.path, "PROFILE.DAT"),
n = -1L, encoding = "unknown")
def_hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
run.H1D.simulation = function(project.path, hydrus.path = NULL, profile.depth,
beginT, endT, deltaT, bot.bc.type, bot.bc.value, const.bot.bc,
soil.para, atm.bc.data, ini.wt,
rdepth, obs.nodes, output.on.console = TRUE, ...) {
if(is.null(hydrus.path)|missing(hydrus.path)){
hydrus.path =  def_hydrus_path
}
# write(initial_profile, file = file.path(project.path, "INI_PROFILE.DAT"), append = F)
maxTp = endT/deltaT
times_s = seq(beginT, endT, by = deltaT)
prev_sims = dir(project.path, pattern = "sim", full.names = T)
if(length(prev_sims > 0)){
mapply(FUN = unlink, prev_sims, recursive = T, force = T)
}
if(maxTp <= 960) {
write.ini.cond(project.path, profile.depth = profile.depth, wt.depth = ini.wt)
write.root.dist(project.path,  rdepth = rdepth, rbeta = 0.962)
write.obs.nodes(project.path, Z = profile.depth, dz = deltaz,
obs.nodes = obs.nodes)
write.hydraulic.para(project.path, para = soil.para)
write.bottom.bc(constant.bc = const.bot.bc, bc.type = bot.bc.type,
bc.value = bot.bc.value, project.path = project.path)
write.atmosph.in(project.path, maxAL = maxTp, deltaT = deltaT,
atm.bc.data = atm.bc.data[1:maxTp, ])
write.print.times(project.path, tmin = beginT, tmax = endT, tstep = deltaT)
call.H1D(project.path, hydrus.path = hydrus.path, output.on.console = output.on.console)
} else {
cat("Running times", 1, "to", 960*deltaT, "...\n")
write.ini.cond(project.path, profile.depth = profile.depth, wt.depth = ini.wt)
write.root.dist(project.path,  rdepth = rdepth, rbeta = 0.962)
write.obs.nodes(project.path, Z = profile.depth, dz = deltaz, obs.nodes = obs.nodes)
write.hydraulic.para(project.path, para = soil_para)
write.bottom.bc(constant.bc = const.bot.bc, bc.type = bot.bc.type,
bc.value = bot.bc.value, project.path = project.path)
write.atmosph.in(project.path, maxAL = 960, deltaT = deltaT,
atm.bc.data = atm_bc_data[1:960, ])
write.print.times(project.path, tmin = beginT, tmax = 960*deltaT, tstep = deltaT)
call.H1D(project.path, hydrus.path = hydrus.path, output.on.console = output.on.console)
cat("simulation from time", 1, "to", 960*deltaT, "success...\n")
sim_number = ceiling(maxTp/960)
sim1_files = list.files(project.path, full.names = TRUE)
sim1_folder = file.path(project.path,"sim1")
dir.create (sim1_folder)
sapply(sim1_files, file.copy, to = sim1_folder)
hyd.output<- read.table(file.path(project.path, "NOD_INF.OUT"), header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 10, check.names = TRUE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = F,
fileEncoding = "", encoding = "unknown")
#################
time_ind = grep("Time:", hyd.output$Node)
to_skip = time_ind[length(time_ind)]+2
head_profile = hyd.output[to_skip:nrow(hyd.output), c("Node", "Depth", "Head")]
head_profile = head_profile[2:(nrow(head_profile) - 1), ]
for(s in 2:5) {
sim_index = s
beginTnew = ((sim_index-1)*960 + 1)
if(s < sim_number){
endTnew =  sim_index*960
} else {
endTnew = nrow(atm.bc.data)
}
sim_times_s = seq(beginTnew, endTnew)
# simulations_dir = file.path(rootPath, soil_type, output_folder)
# if(!dir.exists(simulations_dir)) dir.create(simulations_dir)
sim_folder = paste("sim", s, sep = "")
atm_bc_data_s = atm.bc.data[sim_times_s, ]
# atm_bc_data_s$tAtm = seq(1, length(sim_times_s))*deltaT
cat("Running times", ceiling(beginTnew*deltaT), "to",
endTnew*deltaT, "...\n")
write.ini.cond(project.path, profile.depth = profile.depth,
pr.vec = as.numeric(head_profile$Head))
write.obs.nodes(project.path, Z = profile.depth, dz = deltaz,
obs.nodes = obs.nodes)
# write.print.times(project.path, tmin = deltaT, atm_bc_data_s$tAtm[nrow(atm_bc_data_s)], tstep = 0.25)
write.print.times(project.path, tmin = atm_bc_data_s$tAtm[1],
tmax = atm_bc_data_s$tAtm[nrow(atm_bc_data_s)], tstep = 0.25)
write.bottom.bc(constant.bc = const.bot.bc, bc.type = bot.bc.type,
bc.value = bot.bc.value, project.path = project.path)
write.atmosph.in(project.path, maxAL = nrow(atm_bc_data_s), deltaT = deltaT,
atm.bc.data = atm_bc_data_s)
call.H1D(project.path, hydrus.path = hydrus.path, output.on.console = output.on.console)
cat("simulation from time", ceiling(beginTnew*deltaT), "to",
endTnew*deltaT, "success...\n")
sim_out_dir = file.path(project.path, sim_folder)
if(!dir.exists(sim_out_dir)) dir.create(sim_out_dir)
sim_s_files = list.files(project.path, include.dirs = F, full.names = T)
sapply(sim_s_files, FUN = file.copy, to = sim_out_dir)
hyd.output<- read.table(file.path(project.path, "NOD_INF.OUT"), header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 10, check.names = TRUE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = F,
fileEncoding = "", encoding = "unknown")
#################
time_ind = grep("Time:", hyd.output$Node)
to_skip = time_ind[length(time_ind)]+2
head_profile = hyd.output[to_skip:nrow(hyd.output), c("Node", "Depth", "Head")]
head_profile = head_profile[2:(nrow(head_profile) - 1), ]
}
}
cat("The simulation finished successfully...\n")
cat("combining all calculations, ...\n")
#####
}
run.H1D.simulation(project.path, profile.depth = profile_depth,
beginT = 0.25, endT = endTime, deltaT = 0.25,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE, soil.para = soil_para,
atm.bc.data = atm_bc_data, ini.wt = 30, rdepth = 120,
obs.nodes = obs_nodes_all, output.on.console = FALSE)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/read_tlevel_out.R', echo=TRUE)
library(hydrusR)
?read.obs_node
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/read_obs_node.R', echo=TRUE)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/read_node_inf.R', echo=TRUE)
join.output.files
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/join_output_files.R', echo=TRUE)
#####
join.output.files(project.path)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/join_output_files.R', echo=TRUE)
#####
join.output.files(project.path)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/join_output_files.R', echo=TRUE)
#####
join.output.files(project.path)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/run_H1D_simulation.R', echo=TRUE)
library(hydrusR)
rm(list = ls())
rootPath = paste("C:/Users/sacharya/Documents/Projects/Water Yield/Hydrus") ## need to change this directory accordingly
project_folder = "wt_fluctuation"
project.path = file.path(rootPath, project_folder)
library(hydrusR)
atm_bc_data = read.csv(file.path(rootPath, "atm_bc_data.csv"), header = TRUE)
et_data = read.csv(file.path(rootPath, "pot_et_2010_hastings.csv"), header = T)
soil_data = read.csv(file = file.path(rootPath, "soilParameters_VG_original.csv"),
header = T)
row.names(soil_data) = soil_data$Soil
profile_depth = 300
deltaz = 1
time_step = 0.25
max_tstep = 960
# obs_nodes = seq(5, zmax_obs, by = 5) #### observation points in cm
zmax_obs = 300
library(data.table)
library(readr)
root_depth = 210
obs_nodes_all = seq(5, zmax_obs, by = 20)
endTime = 365*24 ### total hours
total_timesteps = endTime/time_step
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
soil_type = "Sand"
const_botbc = T
bot_bc_type = "flux"
# botFlux = rep(c(0.01, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2)/24, each = nrow(atm_bc_data)/10)
# botFlux = rep(c(0.5, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.05)/24, each = nrow(atm_bc_data)/10)
###variable bottom head (exponential decay function)
# ab = (1:nrow(atm_bc_data))/24
# botHead = 295*exp(-0.005*ab)
ab = (1:nrow(atm_bc_data))/24
botFlux =  -0.002*(exp(-0.01*ab))
const_botFlux = 0.0000 ##### in cm/hr
if(bot_bc_type == "flux" && const_botbc == FALSE) {
atm_bc_data$rB = botFlux
atm_bc_data$hB = 0 *time_step ###
}
if(bot_bc_type  == "head" && const_botbc == FALSE){
atm_bc_data$hB = botHead
atm_bc_data$rB = 0
}
# if(const_botbc == TRUE){
#      write.constant.bc(const.bc.type = "flux", bc.value = const_botFlux,
#                     project.path)
# }
#####Apply constant ET boundary conditions
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
# rm(list = ls())
row.names(soil_data) = soil_data$Soil
para_names = c("thr", "ths", "Alfa", "n", "Ks", "l")
soil_para = as.list(soil_data[soil_type, para_names])
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[rep(seq_len(nrow(atm_bc_data)), each = 4), ]
atm_bc_data$tStep = seq(time_step, endTime, by = time_step)
row.names(atm_bc_data) = NULL
atm_bc_data = dplyr::rename(atm_bc_data, tAtm = tStep)
# write.csv("atm_bc_data",
#          file = file.path(project.path, "atm_bc_data.csv"), row.names = F)
create.soil.profile(project.path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = 1)
initial_profile = readLines(con = file.path(project.path, "PROFILE.DAT"),
n = -1L, encoding = "unknown")
hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
run.H1D.simulation(project.path, hydrus.path = hydrus_path, profile.depth = profile_depth,
beginT = 0.25, endT = endTime, deltaT = 0.25,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE, soil.para = soil_para,
atm.bc.data = atm_bc_data, ini.wt = 30, rdepth = 120,
obs.nodes = obs_nodes_all, output.on.console = FALSE)
sim_dirs = dir(project.path, pattern = "sim", full.names = TRUE)
sim_dirs
mapply(FUN = unlink, sim_dirs, recursive = T, force = T)
library(hydrusR)
library(hydrusR)
file.exists("C:/Users/sacharya/.ssh/id_rsa")
