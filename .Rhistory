# df =  sym(Data)
df = dplyr::select(Data, treatment, age, year, Site, variable)
df_out = group_by(df, Site, treatment, year, age) %>%
summarise_all(funs(mean, min, max, se, .args = list(na.rm = T)))
df_out = df_out %>%
mutate(ll = mean - 1.96*se, ul = mean + 1.96*se)
return(df_out)
}
get_data_summary(flga_npp, "LAI") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 14) +
labs(x = "Age (yrs)", y = parse(text = "LAI~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "BA") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Basal~Area~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "TAGB") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Total~Above~Ground~Biomass~(Mg~ha^-1)"))+
facet_grid(Site~treatment, scales = "free")
library(rlang)
se = function(x, na.rm = T, ...) sd(x, na.rm = T)/sqrt(length(na.omit(x)))
get_data_summary = function(Data, variable) {
# df =  sym(Data)
df = dplyr::select(Data, treatment, age, year, Site, variable)
df_out = group_by(df, Site, treatment, year, age) %>%
summarise_all(funs(mean, min, max, se, .args = list(na.rm = T)))
df_out = df_out %>%
mutate(ll = mean - 1.96*se, ul = mean + 1.96*se)
return(df_out)
}
get_data_summary(flga_npp, "LAI") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 14) +
labs(x = "Age (yrs)", y = parse(text = "LAI~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "BA") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Basal~Area~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "TAGB") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Total~Above~Ground~Biomass~(Mg~ha^-1)"))+
facet_grid(Site~treatment, scales = "free")
library(rlang)
se = function(x, na.rm = T, ...) sd(x, na.rm = T)/sqrt(length(na.omit(x)))
get_data_summary = function(Data, variable) {
# df =  sym(Data)
df = dplyr::select(Data, treatment, age, year, Site, variable)
df_out = group_by(df, Site, treatment, year, age) %>%
summarise_all(funs(mean, min, max, se, .args = list(na.rm = T)))
df_out = df_out %>%
mutate(ll = mean - 1.96*se, ul = mean + 1.96*se)
return(df_out)
}
get_data_summary(flga_npp, "LAI") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 14) +
labs(x = "Age (yrs)", y = parse(text = "LAI~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "BA") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Basal~Area~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "TAGB") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Total~Above~Ground~Biomass~(Mg~ha^-1)"))+
facet_grid(Site~treatment, scales = "free")
library(rlang)
se = function(x, na.rm = T, ...) sd(x, na.rm = T)/sqrt(length(na.omit(x)))
get_data_summary = function(Data, variable) {
# df =  sym(Data)
df = dplyr::select(Data, treatment, age, year, Site, variable)
df_out = group_by(df, Site, treatment, year, age) %>%
summarise_all(funs(mean, min, max, se, .args = list(na.rm = T)))
df_out = df_out %>%
mutate(ll = mean - 1.96*se, ul = mean + 1.96*se)
return(df_out)
}
get_data_summary(flga_npp, "LAI") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 14) +
labs(x = "Age (yrs)", y = parse(text = "LAI~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "BA") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Basal~Area~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "TAGB") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Total~Above~Ground~Biomass~(Mg~ha^-1)"))+
facet_grid(Site~treatment, scales = "free")
library(rlang)
se = function(x, na.rm = T, ...) sd(x, na.rm = T)/sqrt(length(na.omit(x)))
get_data_summary = function(Data, variable) {
# df =  sym(Data)
df = dplyr::select(Data, treatment, age, year, Site, variable)
df_out = group_by(df, Site, treatment, year, age) %>%
summarise_all(funs(mean, min, max, se, .args = list(na.rm = T)))
df_out = df_out %>%
mutate(ll = mean - 1.96*se, ul = mean + 1.96*se)
return(df_out)
}
get_data_summary(flga_npp, "LAI") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 14) +
labs(x = "Age (yrs)", y = parse(text = "LAI~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "BA") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Basal~Area~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "TAGB") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Total~Above~Ground~Biomass~(Mg~ha^-1)"))+
facet_grid(Site~treatment, scales = "free")
plt.sitedata(fl_npp, variable = 'BA', title = "Florida")
plt.sitedata(ga_npp, variable = 'BA', title = "Georgia")
plt.sitedata(fl_npp, "LAI", title = "FLorida")
plt.sitedata(ga_npp, "LAI", title = "Georgia")
ggplot(fl_npp, aes(x = `All-sided LAI`/2, y = LAI))+
geom_point(shape = 21, color = "royalblue1", fill = "skyblue")+
stat_smooth(method = "lm", se = F, color = "red") +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "longdash")+ labs(x = "LAI", y = "Allometric LAI") +
theme_bw()
ggplot(fl_npp, aes(x = `All-sided LAI`/2, y = LAI))+
geom_point(shape = 21, color = "royalblue1", fill = "skyblue")+
stat_smooth(method = "lm", se = F, color = "red") +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "longdash")+ labs(x = "LAI", y = "Allometric LAI") +
theme_base()
library(rlang)
se = function(x, na.rm = T, ...) sd(x, na.rm = T)/sqrt(length(na.omit(x)))
get_data_summary = function(Data, variable) {
# df =  sym(Data)
df = dplyr::select(Data, treatment, age, year, Site, variable)
df_out = group_by(df, Site, treatment, year, age) %>%
summarise_all(funs(mean, min, max, se, .args = list(na.rm = T)))
df_out = df_out %>%
mutate(ll = mean - 1.96*se, ul = mean + 1.96*se)
return(df_out)
}
get_data_summary(flga_npp, "LAI") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 14) +
labs(x = "Age (yrs)", y = parse(text = "LAI~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "BA") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Basal~Area~(m^2~m^-2)"))+
facet_grid(Site~treatment, scales = "free")
get_data_summary(flga_npp, "TAGB") %>%
ggplot(., aes(x = age, y = mean)) +
geom_errorbar(aes(ymin = ll, ymax = ul), width = 0.1, color = "gray50")+
geom_point(color = "royalblue1", size = 2)+
theme_base(base_size = 16) +
labs (x = "Age (yrs)", y = parse(text = "Total~Above~Ground~Biomass~(Mg~ha^-1)"))+
facet_grid(Site~treatment, scales = "free")
install.packages(c("data.table", "dplyr", "h2o", "highr", "ini", "IRdisplay", "later", "munsell", "pillar", "purrr", "Rcpp", "repr", "reticulate", "rgdal", "rJava", "rlang", "rmarkdown", "rvcheck", "sf", "shiny", "shinyAce", "simecol", "sp", "sparklyr", "stringi", "tidyr", "units", "utf8", "zoo"))
library(devtools())
document()
library(hydrusR)
rm(list = ls())
rootPath = path.expand("~/Documents") ## where to create the project
project_name = "testproject2"  ## Name of the project
project_path = file.path(rootPath, project_name)
hydrus_path = "/home/shoebodh/PlayOnLinux's virtual drives/Windows7/drive_c/Program Files/PC-Progress/Hydrus-1D 4.xx/"
# hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
library(hydrusR)
library(data.table)
library(dplyr)
## Basic inputs
sunit = "cm" ## Space units
tunit = "hours" ## time units
pTimes = 1
##Profile inputs
profile_depth = 300
deltaz = 1
profile_nodes = seq(0, profile_depth, by = deltaz)
###vGen Soil parameters
soil_para = list(thr = 0.045, ths = 0.43, Alfa = 0.145, n = 2.69,
Ks = 29.7, l = 0.45)
## Root depth and observation nodes input
root_depth = 210
obs_nodes_all = seq(20, profile_depth, by = 20)
nObsNodes = length(obs_nodes_all)
### Time inputs
time_step = 1
endTime = 1800 ### total hours
total_timesteps = endTime/time_step
ntimes = length(1:total_timesteps)
## LAI and pet
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
## Boundary conditions
const_botbc = TRUE
bot_bc_type = "flux"
const_botFlux = 0.0000 ##### in cm/hr
### Atmospheric top boundary conditions
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, time_step),
Prec = numeric(ntimes),
rSoil = numeric(ntimes),
rRoot = numeric(ntimes),
hCritA = rep(10000, ntimes),
rB = numeric(ntimes),
hB = numeric(ntimes),
ht = numeric(ntimes),
RootDepth = numeric(ntimes))
# if(const_botbc == TRUE){
#      write.constant.bc(const.bc.type = "flux", bc.value = const_botFlux,
#                     project_path)
# }
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 1/time_step), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/(1/time_step))
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[1:ntimes, ]
create.H1D.project(project.name = project_name, parent.dir = rootPath,
TimeUnit = tunit, PrintTimes = pTimes,
processes = c("WaterFlow = T", "RootWaterUptake = T"),
geometry = c(ProfileDepth = profile_depth,
NumberOfNodes = length(profile_nodes),
ObservationNodes = nObsNodes))
nObsNodes
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = time_step,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE, soil.para = soil_para,
atm.bc.data = atm_bc_data, ini.wt = 40, TimeUnit = tunit,
rdepth = 240,
obs.nodes = obs_nodes_all, show.output = T)
project_path
hydrus_path
file.exists(hydrus_path)
setwd(hydrus_path)
setwd("~/Documents/hydrus1D/wtdynamics")
?et.hourly
project.path = getwd()
getwd()
read.obs_node(project.path)
setwd("~/Google Drive/R/RPackages/hydrusR")
out.file = "Obs_Node.out"
obs.output = NULL
obs.nodes = "all"
options(warn = -1)
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
head(obs_node_out)
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
head(obs_node_out)
head(obs_node_out, 20)
head(obs_node_out, 30)
setwd("~/h1dExample")
project.path = getwd()
setwd("~/Google Drive/R/RPackages/hydrusR")
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
head(obs_node_out)
all_na_ind =   sapply(X = obs_node_out, function(x) all(is.na(x)))
obs_node_out = obs_node_out[, !all_na_ind, with = FALSE]
output_names_rep = rep(output_names, times = length(obs.nodes.all))
obs_nodes_rep = rep(obs.nodes.all, each = length(output_names))
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
colnames(obs_node_out) = c("Time", output_names_all)
obs_node_out = data.frame(obs_node_out, row.names = NULL, check.names = F)
if(is.null(obs.output) | missing(obs.output)) {
obs_node_out = obs_node_out
} else {
output_cols = grepl(obs.output, names(obs_node_out))
# output_ind = grepl(pattern = paste(c("Time", obs.output), collapse = "|"), x = names(obs_node_out))
in_cols = c("Time", names(obs_node_out)[output_cols])
obs_node_out =  obs_node_out[, in_cols]
}
t1 = obs_node_out[1, ]
t1$Time = 0
tstep = diff(obs_node_out$Time)
tstep = tstep[length(tstep)]
remainder = obs_node_out$Time%%tstep
rem_ind = which(remainder == 0)
obs_node_out = rbind(t1, obs_node_out[rem_ind, ])
row.names(obs_node_out) = NULL
read.obs_node(project.path = )
read.obs_node(project.path)
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
node_ind
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
head(obs_node_out, 20)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
all_na_ind =   sapply(X = obs_node_out, function(x) all(is.na(x)))
obs_node_out = obs_node_out[, !all_na_ind, with = FALSE]
output_names_rep = rep(output_names, times = length(obs.nodes.all))
obs_nodes_rep = rep(obs.nodes.all, each = length(output_names))
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
colnames(obs_node_out) = c("Time", output_names_all)
obs_node_out = data.frame(obs_node_out, row.names = NULL, check.names = F)
head(obs_node_out)
head(obs_node_out)
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
head(obs_node_out)
all_na_ind =   sapply(X = obs_node_out, function(x) all(is.na(x)))
obs_node_out = obs_node_out[, !all_na_ind, with = FALSE]
head(obs_node_out)
all_na_ind
obs_node_out = obs_node_out[, !all_na_ind]
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
all_na_ind =   sapply(X = obs_node_out, function(x) all(is.na(x)))
obs_node_out = obs_node_out[, !all_na_ind]
head(obs_node_out)
all_na_ind
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
all_na_ind =   sapply(X = obs_node_out, function(x) all(is.na(x)))
obs_node_out = obs_node_out[, !(all_na_ind), ]
head(obs_node_out)
all_na_ind =   sapply(X = obs_node_out, function(x) !all(is.na(x)))
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
all_na_ind =   sapply(X = obs_node_out, function(x) !all(is.na(x)))
head(all_na_ind)
all_na_ind
obs_node_out[, (all_na_ind), with = F]
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
all_na_ind =   sapply(X = obs_node_out, function(x) !all(is.na(x)))
obs_node_out = obs_node_out[, (all_na_ind), with = F]
all_na_ind
head(obs_node_out)
obs_nodex = seq(20, 200, 10)
length(obs_nodex)
obs_nodes = seq(20, 200, 10)
obs_nodes
length(obs_nodes)
obs_nodes = seq(20, 200, 20)
length(obs_nodes)
obs.nodes = obs_nodes
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
node_ind = grep("Node", data.frame(obs_node_out)[, 1])
output_names = unlist(unclass(obs_node_out[node_ind + 2]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[output_names != ""]
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:(node_ind + 2), nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
all_na_ind =   sapply(X = obs_node_out, function(x) !all(is.na(x)))
obs_node_out = obs_node_out[, (all_na_ind), with = F]
output_names_rep = rep(output_names, times = length(obs.nodes))
obs_nodes_rep = rep(obs.nodes, each = length(output_names))
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
colnames(obs_node_out) = c("Time", output_names_all)
obs_node_out = data.frame(obs_node_out, row.names = NULL, check.names = F)
if(is.null(obs.output) | missing(obs.output)) {
obs_node_out = obs_node_out
} else {
output_cols = grepl(obs.output, names(obs_node_out))
# output_ind = grepl(pattern = paste(c("Time", obs.output), collapse = "|"), x = names(obs_node_out))
in_cols = c("Time", names(obs_node_out)[output_cols])
obs_node_out =  obs_node_out[, in_cols]
}
t1 = obs_node_out[1, ]
t1$Time = 0
tstep = diff(obs_node_out$Time)
tstep = tstep[length(tstep)]
remainder = obs_node_out$Time%%tstep
rem_ind = which(remainder == 0)
obs_node_out = rbind(t1, obs_node_out[rem_ind, ])
row.names(obs_node_out) = NULL
head(obs_node_out)
source('~/Google Drive/R/RPackages/hydrusR/R/read_obs_node.R', echo=TRUE)
axt = read.obs_node(project.path, obs.nodes = obs_nodes)
head(axt)
library(hydrusR)
devtools::documents()
install.packages("devtools")
library(devtools())
library(devtools)
document()
