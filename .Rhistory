profile_data
write(profile_data, file = file.path(project.path, "PROFILE.DAT"),
append = F)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/write_obs_nodes.R')
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
obs_nodes_all
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all = c(5))
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = c(5))
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = c(0))
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = c(0, 5, 10))
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = c(2, 5, 10))
obs.nodes = c(2, 5, 10)
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
obs_nodes_all
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
profile.template = system.file("templates/PROFILE.DAT", package = "hydrusR")
profile_dat = readLines(profile.template, n = -1L, encoding = "unknown")
header_line = profile_dat[1:2]
dline = profile_dat[3]
dline_split  = unlist(strsplit(dline, " "))
dline_split = dline_split[dline_split!= ""]
dval = dline_split[2]
dformat_new = format2sci(-profile.depth, ndec = 6, power.digits = 3)
dline_split_new = dline_split
dline_split_new[2] = dformat_new
#   dline_split_new = dline_split_new[]
fmt_space = c(5, 15, 15, 15)
fmt_vec = paste("%", fmt_space, "s", sep = "")
dline_fmt_new = sprintf(fmt = fmt_vec, dline_split_new)
dline_fmt_new = paste(dline_fmt_new, collapse = "")
table_header = profile_dat[4]
dhead_val = substr(table_header, start = 1, stop = 5)
dhead_val = as.numeric(trimws(dhead_val))
header_rest = substr(table_header, start = 6, stop = nchar(table_header))
dhead_val_new = sprintf("%5s", (profile.depth + 1))
table_header_new = paste0(dhead_val_new, header_rest)
table_body = profile_dat[5:length(profile_dat)]
table_body = table_body[-length(table_body)] #### row with number of observation points value
body_split = strsplit(table_body, split = " ")
body_split2 = sapply(body_split, FUN = function(x) x[x!= ""])
# body_new = do.call("rbind", body_split2)
table_body_new = t(body_split2)
depth_vec = seq(0, profile.depth, by = dz)
head_vec = numeric(length(depth_vec))
row_counts = seq(length(depth_vec))
zero_vec = numeric(length(depth_vec))
one_vec = rep(1, length(depth_vec))
temp_vec = rep(Temp, length(depth_vec))
conc_vec = rep(Conc, length(depth_vec))
zero_vec_fmt = mapply(FUN = format2sci, zero_vec, ndec = 6, power.digits = 3)
one_vec_fmt = mapply(FUN = format2sci, one_vec, ndec = 6, power.digits = 3)
depth_vec_fmt = mapply(FUN = format2sci, depth_vec, ndec = 6, power.digits = 3)
depth_vec_fmt = paste0("-", depth_vec_fmt)
head_vec_fmt = zero_vec_fmt
mat_vec = one_vec
layer_vec = one_vec
beta_vec_fmt = zero_vec_fmt
axz_vec_fmt = one_vec_fmt
bxz_vec_fmt = one_vec_fmt
dxz_vec_fmt = one_vec_fmt
temp_vec_fmt = mapply(FUN = format2sci, temp_vec, ndec = 6, power.digits = 3)
conc_vec_fmt = mapply(FUN = format2sci, conc_vec, ndec = 6, power.digits = 3)
profile_df = data.frame(row_counts,
depth_vec_fmt,
head_vec_fmt,
mat_vec,
layer_vec,
beta_vec_fmt,
axz_vec_fmt,
bxz_vec_fmt,
dxz_vec_fmt,
temp_vec_fmt,
conc_vec_fmt)
profile_mat = as.matrix(profile_df)
fmt_space_body = c(5, 15, 15, 5, 5, 15, 15, 15, 15, 15, 15)
fmt_vec_body = paste("%", fmt_space_body, "s", sep = "")
profile_mat_fmt = profile_mat
colnames(profile_mat_fmt) = NULL
for(n in 1: nrow(profile_mat_fmt)){
profile_mat_fmt[n, ] = sprintf(fmt_vec_body, profile_mat[n, ])
}
profile_mat_fmt2 = apply(profile_mat_fmt, MARGIN = 1, FUN = paste, collapse = "")
tspace = sprintf("%13s", "")
profile_mat_fmt2 = paste(profile_mat_fmt2, tspace)
profile_data_new = c(header_line, dline_fmt_new, table_header_new, profile_mat_fmt2, " 0")
profile_file = file.path(project.path, out.file)
tail(profile_data_new)
write(profile_data_new, file = profile_file, append = FALSE)
profile_file
out.file
out.file  = "PROFILE.DAT"
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
profile.template = system.file("templates/PROFILE.DAT", package = "hydrusR")
profile_dat = readLines(profile.template, n = -1L, encoding = "unknown")
header_line = profile_dat[1:2]
dline = profile_dat[3]
dline_split  = unlist(strsplit(dline, " "))
dline_split = dline_split[dline_split!= ""]
dval = dline_split[2]
dformat_new = format2sci(-profile.depth, ndec = 6, power.digits = 3)
dline_split_new = dline_split
dline_split_new[2] = dformat_new
#   dline_split_new = dline_split_new[]
fmt_space = c(5, 15, 15, 15)
fmt_vec = paste("%", fmt_space, "s", sep = "")
dline_fmt_new = sprintf(fmt = fmt_vec, dline_split_new)
dline_fmt_new = paste(dline_fmt_new, collapse = "")
table_header = profile_dat[4]
dhead_val = substr(table_header, start = 1, stop = 5)
dhead_val = as.numeric(trimws(dhead_val))
header_rest = substr(table_header, start = 6, stop = nchar(table_header))
dhead_val_new = sprintf("%5s", (profile.depth + 1))
table_header_new = paste0(dhead_val_new, header_rest)
table_body = profile_dat[5:length(profile_dat)]
table_body = table_body[-length(table_body)] #### row with number of observation points value
body_split = strsplit(table_body, split = " ")
body_split2 = sapply(body_split, FUN = function(x) x[x!= ""])
# body_new = do.call("rbind", body_split2)
table_body_new = t(body_split2)
depth_vec = seq(0, profile.depth, by = dz)
head_vec = numeric(length(depth_vec))
row_counts = seq(length(depth_vec))
zero_vec = numeric(length(depth_vec))
one_vec = rep(1, length(depth_vec))
temp_vec = rep(Temp, length(depth_vec))
conc_vec = rep(Conc, length(depth_vec))
zero_vec_fmt = mapply(FUN = format2sci, zero_vec, ndec = 6, power.digits = 3)
one_vec_fmt = mapply(FUN = format2sci, one_vec, ndec = 6, power.digits = 3)
depth_vec_fmt = mapply(FUN = format2sci, depth_vec, ndec = 6, power.digits = 3)
depth_vec_fmt = paste0("-", depth_vec_fmt)
head_vec_fmt = zero_vec_fmt
mat_vec = one_vec
layer_vec = one_vec
beta_vec_fmt = zero_vec_fmt
axz_vec_fmt = one_vec_fmt
bxz_vec_fmt = one_vec_fmt
dxz_vec_fmt = one_vec_fmt
temp_vec_fmt = mapply(FUN = format2sci, temp_vec, ndec = 6, power.digits = 3)
conc_vec_fmt = mapply(FUN = format2sci, conc_vec, ndec = 6, power.digits = 3)
profile_df = data.frame(row_counts,
depth_vec_fmt,
head_vec_fmt,
mat_vec,
layer_vec,
beta_vec_fmt,
axz_vec_fmt,
bxz_vec_fmt,
dxz_vec_fmt,
temp_vec_fmt,
conc_vec_fmt)
profile_mat = as.matrix(profile_df)
fmt_space_body = c(5, 15, 15, 5, 5, 15, 15, 15, 15, 15, 15)
fmt_vec_body = paste("%", fmt_space_body, "s", sep = "")
profile_mat_fmt = profile_mat
colnames(profile_mat_fmt) = NULL
for(n in 1: nrow(profile_mat_fmt)){
profile_mat_fmt[n, ] = sprintf(fmt_vec_body, profile_mat[n, ])
}
profile_mat_fmt2 = apply(profile_mat_fmt, MARGIN = 1, FUN = paste, collapse = "")
tspace = sprintf("%13s", "")
profile_mat_fmt2 = paste(profile_mat_fmt2, tspace)
profile_data_new = c(header_line, dline_fmt_new, table_header_new, profile_mat_fmt2, " 0")
profile_file = file.path(project.path, out.file)
write(profile_data_new, file = profile_file, append = FALSE)
obs.nodes
if(!is.null(obs.nodes)) write.obs.nodes(project.path, obs.nodes)
def_profile_data =   readLines(con = file.path(project.path, "PROFILE.DAT"),
n = -1L, encoding = "unknown", warn = F)
profile_summary = def_profile_data[1:4]
pr_header = trimws(def_profile_data[4])
num_nodes = as.numeric(unlist(strsplit(pr_header, " "))[1])
profile_depth = num_nodes - 1
profile_body = def_profile_data[5:(5 + num_nodes - 1)]
if(length(obs.nodes) == 1 && obs.nodes == 0) obs.nodes = NULL
if(missing(obs.nodes)|is.null(obs.nodes)) {
num_obs_nodes = sprintf("%5.0f", 0)
} else {
num_obs_nodes = sprintf("%5.0f", length(num_obs_nodes))
if(max(obs.nodes) > profile_depth){
cat ("omitting observation noded deeper than  profile  depth ...\n" )
obs.nodes = obs.nodes[obs.nodes <= profile_depth]
}
}
num_obs_nodes
obs.nodes
if(missing(obs.nodes)|is.null(obs.nodes)) {
num_obs_nodes = sprintf("%5.0f", 0)
} else {
num_obs_nodes = sprintf("%5.0f", length(obs.nodes))
if(max(obs.nodes) > profile_depth){
cat ("omitting observation noded deeper than  profile  depth ...\n" )
obs.nodes = obs.nodes[obs.nodes <= profile_depth]
}
}
num_obs_nodes
obs.nodes
nodes_fmt = sprintf(fmt = "%5.0f", obs.nodes)
nodes_new = paste(nodes_fmt, collapse = "")
profile_data = c(profile_summary, profile_body, num_obs_nodes, nodes_new)
write(profile_data, file = file.path(project.path, "PROFILE.DAT"),
append = F)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/write_obs_nodes.R')
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/create_soil_profile.R')
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
obs_nodes_all
obs_nodes_all = seq(5, 50, 5)
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = NULL)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = obs_nodes_all)
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = NULL)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
write.ini.cond(project.path = project_path, wt.depth = initial_wtable)
file.profile.dat = file.path(project.path, "PROFILE.DAT")
profile_data1 = readLines(con = file.profile.dat, n = -1L, encoding = "unknown")
pr.vec = NULL
wt.depth = initial_wtable
wt.depth
file.profile.dat = file.path(project.path, "PROFILE.DAT")
def_profile_data = readLines(con = file.profile.dat, n = -1L, encoding = "unknown")
profile_summary = def_profile_data[1:5]
node_num_ind = grep(pattern =  ("^[0-9]$"), def_profile_data)
pr_tail = tail(def_profile_data, 1)
tail_split = unlist(strsplit(pr_tail, split = " "))
profile_summary
pr_header = trimws(def_profile_data[4])
num_nodes = as.numeric(unlist(strsplit(pr_header, " "))[1])
profile_depth = num_nodes - 1
profile_depth
profile_body = def_profile_data[5:(5 + num_nodes - 1)]
profile_body
porfile_body
profile_body
num_nodes
node_info_lines = def_profile_data[(num_nodes + 5):(length(def_profile_data))]
node_info_lines
header_split = unlist(strsplit(def_profile_data[5], split = " "))
header_split2 = header_split[header_split != ""]
header_split
header_split2
header_split = unlist(strsplit(def_profile_data[4], split = " "))
header_split2 = header_split[header_split != ""]
end_row = profile_body[length(profile_body)]
end_row
profile_data_split = strsplit(profile_body, split = " ")
profile_data_split2 = sapply(profile_data_split, FUN = function(x) x[x!= ""])
profile_data_new = t(profile_data_split2)
deltaz = abs(as.numeric(profile_data_new[3, 2]) - as.numeric(profile_data_new[2, 2]))
if(!is.null(pr.vec)){
ini_pr_vec = pr.vec
} else {
ini_pr_vec = seq(0, profile_depth, by = deltaz) - wt.depth
}
pr_vec_fmt = mapply(FUN = format2sci, ini_pr_vec, ndec = 6, power.digits = 3)
profile_data_new[1:length(pr_vec_fmt), 3] = pr_vec_fmt
fmt_space = c(5, 15, 15, 5, 5, 15, 15, 15, 15, 15, 15)
fmt_vec = paste("%", fmt_space, "s", sep = "")
fmt_vec = fmt_vec[1:ncol(profile_data_new)]
profile_data_fmt = profile_data_new
for(n in 1:nrow(profile_data_new)){
profile_data_fmt[n, ] = sprintf(fmt_vec, profile_data_new[n, ])
}
profile_data_new = c(profile_summary, profile_data_fmt2, node_info_lines)
file.profile.dat = file.path(project.path, "PROFILE.DAT")
def_profile_data = readLines(con = file.profile.dat, n = -1L, encoding = "unknown")
profile_summary = def_profile_data[1:4]
pr_header = trimws(def_profile_data[4])
num_nodes = as.numeric(unlist(strsplit(pr_header, " "))[1])
profile_depth = num_nodes - 1
profile_body = def_profile_data[5:(5 + num_nodes - 1)]
node_num_ind = grep(pattern =  ("^[0-9]$"), def_profile_data)
pr_tail = tail(def_profile_data, 1)
tail_split = unlist(strsplit(pr_tail, split = " "))
node_info_lines = def_profile_data[(num_nodes + 5):(length(def_profile_data))]
header_split = unlist(strsplit(def_profile_data[4], split = " "))
header_split2 = header_split[header_split != ""]
profile_data_split = strsplit(profile_body, split = " ")
profile_data_split2 = sapply(profile_data_split, FUN = function(x) x[x!= ""])
profile_data_new = t(profile_data_split2)
deltaz = abs(as.numeric(profile_data_new[3, 2]) - as.numeric(profile_data_new[2, 2]))
if(!is.null(pr.vec)){
ini_pr_vec = pr.vec
} else {
ini_pr_vec = seq(0, profile_depth, by = deltaz) - wt.depth
}
pr_vec_fmt = mapply(FUN = format2sci, ini_pr_vec, ndec = 6, power.digits = 3)
profile_data_new[1:length(pr_vec_fmt), 3] = pr_vec_fmt
fmt_space = c(5, 15, 15, 5, 5, 15, 15, 15, 15, 15, 15)
fmt_vec = paste("%", fmt_space, "s", sep = "")
fmt_vec = fmt_vec[1:ncol(profile_data_new)]
profile_data_fmt = profile_data_new
for(n in 1:nrow(profile_data_new)){
profile_data_fmt[n, ] = sprintf(fmt_vec, profile_data_new[n, ])
}
tspace = sprintf("%13s", "")
profile_data_fmt2 = apply(profile_data_fmt, MARGIN = 1, FUN = paste, collapse = "")
profile_data_fmt2 = paste(profile_data_fmt2, tspace)
profile_data_new = c(   profile_summary, profile_data_fmt2, node_info_lines)
head(profile_data_new)
tail(profile_data_new)
write(profile_data_new, file.profile.dat, append = FALSE)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/write_initial_condition.R')
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz, obs.nodes = NULL)
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
write.ini.cond(project.path = project_path, wt.depth = initial_wtable)
write.hydraulic.para(project.path = project_path, para = soil_para)
write.bottom.bc(constant.bc = TRUE, bc.type = bot_bc_type,
bc.value = const_botFlux, project.path = project_path)
os.type = .Platform$OS.type
obs.type
os.type
win_def_hdir = "C:/Program Files (x86)/PC-Progress"
wind_h1d_path = list.files(win_def_hdir, full.names = T, pattern = "Hydrus-1D")
wind_h1d_path
h1d_version_path = list.files(win_def_hdir, full.names = T, pattern = "Hydrus-1D")
h1d_version_dir = list.files(win_def_hdir, full.names = T, pattern = "Hydrus-1D")
h1d_version_dir
versions = strsplit(basenames(h1d_version_dir), " |\\.")
h1d_versions = strsplit(basename(h1d_version_dir), " |\\.")
h1d_versions
lapply(basename(h1d_version_dir),
function(x) {
unlist(strsplit(x, " |\\."))
})
h1d_versions = lapply(basename(h1d_version_dir),
function(x) {
name_split = unlist(strsplit(x, " |\\."))
ver_num = as.numeric(names_split)
return(ver_num[!is.na(ver_num)])
})
h1d_versions = lapply(basename(h1d_version_dir),
function(x) {
name_split = unlist(strsplit(x, " |\\."))
ver_num = as.numeric(names_split)
return(ver_num[!is.na(ver_num)])
})
h1d_versions = lapply(basename(h1d_version_dir),
function(x) {
name_split = unlist(strsplit(x, " |\\."))
ver_num = as.numeric(name_split)
return(ver_num[!is.na(ver_num)])
})
h1d_versions = lapply(basename(h1d_version_dir),
function(x) {
name_split = unlist(strsplit(x, " |\\."))
return(name_split[2])
})
h1d_versions
h1d_versions = sapply(basename(h1d_version_dir),
function(x) {
name_split = unlist(strsplit(x, " |\\."))
return(as.numeric(name_split[2]))
})
h1d_versions
def_h1dexe_path = file.path(wind_def_hdir, h1d_version_dir[which.max(h1d_versions)])
win_def_hdir = "C:/Program Files (x86)/PC-Progress"
h1d_version_dir = list.files(win_def_hdir, full.names = T, pattern = "Hydrus-1D")
h1d_versions = sapply(basename(h1d_version_dir),
function(x) {
name_split = unlist(strsplit(x, " |\\."))
return(as.numeric(name_split[2]))
})
def_h1dexe_path = file.path(wind_def_hdir, h1d_version_dir[which.max(h1d_versions)])
def_h1dexe_path = file.path(win_def_hdir, h1d_version_dir[which.max(h1d_versions)])
def_h1dexe_path
hydrus.path = NULL
if(is.null(hydrus.path)) {
os.type = .Platform$OS.type
if(os.type == "windows"){
win_def_hdir = "C:/Program Files (x86)/PC-Progress"
h1d_version_dir = list.files(win_def_hdir, full.names = T, pattern = "Hydrus-1D")
h1d_versions = sapply(basename(h1d_version_dir),
function(x) {
name_split = unlist(strsplit(x, " |\\."))
return(as.numeric(name_split[2]))
})
hydrus.path = file.path(win_def_hdir, h1d_version_dir[which.max(h1d_versions)])
}
}
hydrus.path
hydrus.exe = "H1D_CALC.EXE"  #### Windows sepcific executable name
oldwd = getwd()
level_01 = file.path(hydrus.path, "LEVEL_01.DIR")
Sys.chmod(level_01, "666")
write(x = noquote(project.path), file = level_01, append = F)
project.path
level_01
hydrus.exe = "H1D_CALC.EXE"  #### Windows sepcific executable name
oldwd = getwd()
oldwd()
hydrus.path
hydrus.path = NULL
if(is.null(hydrus.path)) {
os.type = .Platform$OS.type
if(os.type == "windows"){
win_def_hdir = "C:/Program Files (x86)/PC-Progress"
h1d_version_dir = list.files(win_def_hdir, full.names = T, pattern = "Hydrus-1D")
h1d_versions = sapply(basename(h1d_version_dir),
function(x) {
name_split = unlist(strsplit(x, " |\\."))
return(as.numeric(name_split[2]))
})
hydrus.path = file.path(win_def_hdir, h1d_version_dir[which.max(h1d_versions)])
}
}
hydrus.path
hydrus.path = NULL
if(is.null(hydrus.path)) {
os.type = .Platform$OS.type
if(os.type == "windows"){
win_def_hdir = "C:/Program Files (x86)/PC-Progress"
h1d_version_dir = list.files(win_def_hdir, full.names = T, pattern = "Hydrus-1D")
h1d_versions = sapply(basename(h1d_version_dir),
function(x) {
name_split = unlist(strsplit(x, " |\\."))
return(as.numeric(name_split[2]))
})
hydrus.path = h1d_version_dir[which.max(h1d_versions)]
}
}
hydrus.path
hydrus.exe = "H1D_CALC.EXE"  #### Windows sepcific executable name
oldwd = getwd()
level_01 = file.path(hydrus.path, "LEVEL_01.DIR")
Sys.chmod(level_01, "666")
write(x = noquote(project.path), file = level_01, append = F)
level_01
Sys.chmod(level_01, "666")
write(x = noquote(project.path), file = level_01, append = F)
level_01
file.info(level_01)
get.chmode
file.exists(level_01)
project.path
level_01
?file
file_level01 = file.path(hydrus.path, "LEVEL_01.DIR")
if(!file.exists(file_level01)) file(file_level01, "w+")
file_level01 = file.path(hydrus.path, "LEVEL_01.DIR")
file_level01
file(file_level01, "w+")
Sys.chmod(hydrus.path, "666")
if(!file.exists(file_level01)) file(file_level01, "w+")
file.create(file_level01)
file.create(file_level01, "w+")
write(x = noquote(project.path), file = file_level01, append = F)
Sys.chmod(hydrus.path, "777")
write(x = noquote(project.path), file = file_level01, append = F)
write(x = noquote(project.path), file = file_level01, append = F, )
oldwd = getwd()
file_level01 = file.path(hydrus.path, "LEVEL_01.DIR")
file_level01
file.info(hydrus.path)
Sys.chmod(hydrus.path, mode = "0777")
file.info(hydrus.path)
file.info(hydrus.path)
if(!file.exists(file_level01)) file(file_level01, "w+")
file("LEVEL_01.DIR")
file.exists(hydrus.path)
file(file.path(hydrus.path, "LEVEL_01.DIR"))
hydrus.path
write(x = noquote(project.path), file = file_level01, append = F)
file.exists(file_level01)
file.create(file.path(hydrus.path, "LEVEL_01.DIR"))
project.path
file_level01
file.create("LEVEL_01.DIR")
write(x = noquote(project.path), file = "LEVEL_01.DIR", append = FALSE)
file.access(file_level01)
Sys.chmod(file_level01, "666")
file.access(file_level01)
write(x = noquote(project.path), file = file_level01, append = F)
file.exists(file_level01)
Sys.chmod(file_level01, "777")
write(x = noquote(project.path), file = file_level01, append = F)
file_level01 = file.path(hydrus.path, "LEVEL_01.DIR")
Sys.chmod(file_level01, "0777")
write(x = noquote(project.path), file = file_level01, append = F)
close
close(file_level01)
