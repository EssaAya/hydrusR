lapply(X = obs.nodes, FUN = function(x, y) grep(x, y), y = n_nodes)
n_nodes = names(obs_node_out)
inc_nodes = lapply(X = obs.nodes, FUN = function(x, y) grep(x, y), y = n_nodes)
lapply(X = obs.nodes, FUN = function(x, y) grep(x, y), y = n_nodes)
n_nodes
n_nodes
lapply(X = inc_nodes_ind, function(x, y) y[x], y = n_nodes, simplify2array = T)
inc_nodes_ind = lapply(X = obs.nodes, FUN = function(x, y) grep(x, y), y = n_nodes)
lapply(X = inc_nodes_ind, function(x, y) y[x], y = n_nodes, simplify2array = T)
inc_nodes  = lapply(X = inc_nodes_ind, function(x, y) y[x], y = n_nodes)
inc_nodes
inc_nodes_ind = lapply(X = obs.nodes, FUN = function(x, y) grep(x, y, fixed = TRUE), y = n_nodes)
inc_nodes_ind
inc_nodes_ind = lapply(X = obs.nodes, FUN = function(x, y) grep(as.character(x), y, fixed = TRUE, value = TRUE), y = n_nodes)
inc_nodes_ind
inc_nodes_ind = lapply(X = obs.nodes, FUN = function(x, y) grep(paste0("_", x), y, fixed = TRUE, value = TRUE), y = n_nodes)
inc_nodes_ind
inc_nodes_ind = lapply(X = obs.nodes, FUN = function(x, y) grep(paste0("_", x, "$"), y, fixed = TRUE, value = TRUE), y = n_nodes)
inc_nodes_ind
paste0("_", x, "$
)
paste0("_", x, "$")
paste0("_", 20, "$")
grep("_20", "Flux_200")
grep("_20", "Flux_200", fixed = T)
?grep
grep("_20^", "Flux_200", fixed = T)
grep("_20$", "Flux_200", fixed = T)
grep("_20[$]", "Flux_200", fixed = T)
grep("_20{$}", "Flux_200", fixed = T)
grep("_20$", "Flux_200", fixed = T)
grep("20$", "Flux_200", fixed = T)
grep("[20]$", "Flux_200", fixed = T)
grep("{20}$", "Flux_200", fixed = T)
grep("{20}$", "Flux_20", fixed = T)
grep("20$", "Flux_20", fixed = T)
grep("_20{$}", "Flux_20", fixed = T)
grep("_20[$]", "Flux_20", fixed = T)
grep("_20^S", "Flux_20", fixed = T)
grep("_20^", "Flux_20", fixed = T)
grep("_20$", "Flux_20", fixed = T)
grep("_[20]$", "Flux_20", fixed = T)
grep("_{20}$", "Flux_20", fixed = T)
grep("_d{20}$", "Flux_20", fixed = T)
grep("_20", "Flux_20", fixed = T)
grep("_20", "Flux_200", fixed = T)
grep("_20", "Flux_200", fixed = F)
grep(20, "Flux_200", fixed = F)
grepl("_20", "Flux_200", fixed = F)
grepRaw("_20", "Flux_200", fixed = F)
grepRaw("_20", "Flux_200", fixed = F, perl = T)
grep("_20", "Flux_200", fixed = F, perl = T)
grep("_20", "Flux_200", fixed = T, perl = T)
grep("_20", "Flux_200", fixed = T, perl = F)
grep("_20$", "Flux_200", fixed = T, perl = F)
grep("_20$", "Flux_200", fixed = T, perl = T)
match("_20", "Flux_200")
regmatches("_20", Flux_200)
regmatches("_20", "Flux_200")
regmatches("_20\>", "Flux_200")
grep("_20\>", "Flux_200", fixed = T, perl = T)
grep("_20b", "Flux_200", fixed = T, perl = T)
grep("_20\b", "Flux_200", fixed = T, perl = T)
grep("_20\b", "Flux_20", fixed = T, perl = T)
grep("_20b", "Flux_20", fixed = T, perl = T)
n_nodes
output_names
inc_nodes_ind
inc_nodes_ind = lapply(X = obs.nodes, FUN = function(x, y) grep(paste0("_", x), y, fixed = TRUE, value = TRUE), y = n_nodes)
inc_nodes_ind
n_nodes
obs_nodes_all
mapply(function(x, y), paste(x, y, sep = "_"), output_names, obs_nodes_all)
mapply(function(x, y) paste(x, y, sep = "_"), output_names, obs_nodes_all)
inc_nodes
grep("20$", "Flux_20", fixed = T)
grep("20*$", "Flux_20", fixed = T)
grep("20$*", "Flux_20", fixed = T)
grep("20\\$", "Flux_20", fixed = T)
grep("20$", "Flux_20", fixed = T)
grep("^[a-z]\\_20$", "Flux_20", fixed = T)
grep("^{a-z}\\_20$", "Flux_20", fixed = T)
grep("^{a-z}\\_20", "Flux_20", fixed = T)
grep("^{a-z}_20", "Flux_20", fixed = T)
grep("^{a-z}_", "Flux_20", fixed = T)
grep("^{a-z}", "Flux_20", fixed = T)
grep("^[a-z]", "Flux_20", fixed = T)
grep("[a-z]", "Flux_20", fixed = T)
grep("[a-z]", "Flux_20", fixed = F)
grep("^{a-z}_", "Flux_20", fixed = F)
grep("^{a-z}\\_20", "Flux_20", fixed = F)
grep("^[a-z]\\_20", "Flux_20", fixed = F)
grep("^[a-z]\\_20$", "Flux_20", fixed = F)
grep("^[a-z]_20$", "Flux_20", fixed = F)
grep("^[a-z]\_20$", "Flux_20", fixed = F)
grep("^[a-z]\\_\\20$", "Flux_20", fixed = F)
grep("^[a-z]{\\_}20$", "Flux_20", fixed = F)
grep("^[a-z][_]20$", "Flux_20", fixed = F)
grep("^[a-z][_]$", "Flux_20", fixed = F)
grep("^[a-z][\\_]$", "Flux_20", fixed = F)
grep("^[a-z]+[]$", "Flux_20", fixed = F)
grep("^[a-z]+$", "Flux_20", fixed = F)
grep("^[a-z]$", "Flux_20", fixed = F)
grep("^[a-z]", "Flux_20", fixed = F)
grep("[a-z]", "Flux_20", fixed = F)
grep("[a-z]_", "Flux_20", fixed = F)
grep("[a-z]_20", "Flux_20", fixed = F)
grep("[a-z]_20", "Flux_20", fixed = T)
grep("[a-z]_20$", "Flux_20", fixed = F)
grep("[a-z]_20$", "Flux_200", fixed = F)
inc_nodes_ind
gfun = function(x) paste0("[a-z]_", x, "$")
gfun
obs_nodes
obs_nodes
obs_nodes_all
inc_nodes_ind = lapply(X = obs.nodes, FUN = function(x, y) grep(paste0("[a-z]_", x, "$"), y, fixed = TRUE, value = TRUE), y = n_nodes)
inc_nodes_ind
aa = function(x, y) grep(paste0("[a-z]_", x, "$"), y, fixed = F, value = TRUE)
aa("20", "Flux_200")
aa("20", "Flux_20")
aa("20", "Flux_200")
inc_nodes_ind = lapply(X = obs.nodes, FUN = function(x, y) grep(paste0("[a-z]_", x, "$"), y, fixed = F, value = TRUE), y = n_nodes)
inc_nodes_ind
inc_nodes_list = lapply(X = obs.nodes, FUN = function(x, y) grep(paste0("[a-z]_", x, "$"), y, fixed = F, value = TRUE), y = n_nodes)
inc_nodes = do.call("c", inc_nodes_list)
inc_nodes
head(obs_nodes_out)
head(obs_node_out)
obs_node_out = obs_node_out[, c("Time", inc_nodes)]
obs_nodes_all = c(20, 60, 80)
obs_nodes_all
obs_nodes_all = obs.nodes
obs_nodes_all
obs.nodes = c(40, 80, 120)
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
output_names = unlist(unclass(obs_node_out[10]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:10, nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
output_names_rep = rep(output_names, times = length(obs.nodes))
obs_nodes_rep = rep(obs.nodes, each = length(output_names))
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
colnames(obs_node_out) = c("Time", output_names_all)
obs_node_out = data.frame(obs_node_out, row.names = NULL, check.names = F)
if(is.null(obs.output) | missing(obs.output)) {
obs_node_out = obs_node_out
} else {
output_cols = grepl(obs.output, names(obs_node_out))
# output_ind = grepl(pattern = paste(c("Time", obs.output), collapse = "|"), x = names(obs_node_out))
in_cols = c("Time", names(obs_node_out)[output_cols])
obs_node_out =  obs_node_out[, in_cols]
}
t1 = obs_node_out[1, ]
t1$Time = 0
tstep = diff(obs_node_out$Time)
tstep = tstep[length(tstep)]
remainder = obs_node_out$Time%%tstep
rem_ind = which(remainder == 0)
obs_node_out = rbind(t1, obs_node_out[rem_ind, ])
row.names(obs_node_out) = NULL
if(is.null(obs.nodes) | missing(obs.nodes)){
obs_node_out = obs_node_out
} else {
n_nodes = names(obs_node_out)
gfun = function(x) paste0("[a-z]_", x, "$")
inc_nodes_list = lapply(X = obs.nodes, FUN = function(x, y) grep(paste0("[a-z]_", x, "$"), y, fixed = F, value = TRUE), y = n_nodes)
inc_nodes = do.call("c", inc_nodes_list)
obs_node_out = obs_node_out[, c("Time", inc_nodes)]
}
head(obs_node_out)
inc_nodes
n_nodes
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
output_names = unlist(unclass(obs_node_out[10]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:10, nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
output_names_rep = rep(output_names, times = length(obs.nodes))
obs_nodes_rep = rep(obs.nodes, each = length(output_names))
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
colnames(obs_node_out) = c("Time", output_names_all)
obs_node_out = data.frame(obs_node_out, row.names = NULL, check.names = F)
if(is.null(obs.output) | missing(obs.output)) {
obs_node_out = obs_node_out
} else {
output_cols = grepl(obs.output, names(obs_node_out))
# output_ind = grepl(pattern = paste(c("Time", obs.output), collapse = "|"), x = names(obs_node_out))
in_cols = c("Time", names(obs_node_out)[output_cols])
obs_node_out =  obs_node_out[, in_cols]
}
t1 = obs_node_out[1, ]
t1$Time = 0
tstep = diff(obs_node_out$Time)
tstep = tstep[length(tstep)]
remainder = obs_node_out$Time%%tstep
rem_ind = which(remainder == 0)
obs_node_out = rbind(t1, obs_node_out[rem_ind, ])
row.names(obs_node_out) = NULL
head(obs_node_out)
obs.nodes
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
output_names = unlist(unclass(obs_node_out[10]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:10, nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
output_names_rep = rep(output_names, times = length(obs.nodes))
obs_nodes_rep = rep(obs.nodes, each = length(output_names))
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
colnames(obs_node_out) = c("Time", output_names_all)
obs_node_out = data.frame(obs_node_out, row.names = NULL, check.names = F)
if(is.null(obs.output) | missing(obs.output)) {
obs_node_out = obs_node_out
} else {
output_cols = grepl(obs.output, names(obs_node_out))
# output_ind = grepl(pattern = paste(c("Time", obs.output), collapse = "|"), x = names(obs_node_out))
in_cols = c("Time", names(obs_node_out)[output_cols])
obs_node_out =  obs_node_out[, in_cols]
}
in_cols
names(obs_node_out)
output_names
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
output_names = unlist(unclass(obs_node_out[10]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:10, nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
head9obs_node_out
head(obs_node_out)
output_names_rep = rep(output_names, times = length(obs.nodes))
output_names_rep
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
colnames(obs_node_out) = c("Time", output_names_all)
obs_node_out = data.frame(obs_node_out, row.names = NULL, check.names = F)
output_names_all
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
output_names = unlist(unclass(obs_node_out[10]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:10, nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
output_names_rep = rep(output_names, times = length(obs.nodes))
obs_nodes_rep = rep(obs.nodes, each = length(output_names))
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
output_names_all
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
output_names = unlist(unclass(obs_node_out[10]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[2:length(output_names)]
obs.output
obs.nodes
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
output_names = unlist(unclass(obs_node_out[10]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:10, nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
output_names_rep = rep(output_names, times = length(obs.nodes))
output_names
obs.nodes
length(obs.nodes)
head(obs_node_out)
obs.nodes = obs_nodes_all
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
output_names = unlist(unclass(obs_node_out[10]))
output_names = unique(output_names[!is.na(output_names)])
output_names = output_names[2:length(output_names)]
obs_node_out = obs_node_out[-c(1:10, nrow(obs_node_out)), ]
obs_node_out = obs_node_out[, colnames(obs_node_out) := lapply(.SD, as.numeric), .SDcols = colnames(obs_node_out)]
output_names_rep = rep(output_names, times = length(obs.nodes))
obs_nodes_rep = rep(obs.nodes, each = length(output_names))
output_names_all = paste(output_names_rep, obs_nodes_rep, sep = "_")
colnames(obs_node_out) = c("Time", output_names_all)
obs_node_out = data.frame(obs_node_out, row.names = NULL, check.names = F)
if(is.null(obs.output) | missing(obs.output)) {
obs_node_out = obs_node_out
} else {
output_cols = grepl(obs.output, names(obs_node_out))
# output_ind = grepl(pattern = paste(c("Time", obs.output), collapse = "|"), x = names(obs_node_out))
in_cols = c("Time", names(obs_node_out)[output_cols])
obs_node_out =  obs_node_out[, in_cols]
}
t1 = obs_node_out[1, ]
t1$Time = 0
tstep = diff(obs_node_out$Time)
tstep = tstep[length(tstep)]
remainder = obs_node_out$Time%%tstep
rem_ind = which(remainder == 0)
obs_node_out = rbind(t1, obs_node_out[rem_ind, ])
row.names(obs_node_out) = NULL
head(obs_node_out)
source('~/Google Drive/R/RPackages/hydrusR/R/read_obs_node.R')
out.file = "T_Level.out"
obs_node_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
head(obs_node_out)
tlevel_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
tlevel_out2 = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE)
tlevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 6, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
head(tlevel_out)
tlevel_out2
tlevel_out2 = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 6, header = T)
head(tlevel_out2)
tlevel_out =  apply(tlevel_out, MARGIN = 2, FUN = as.numeric)
tlevel_out = na.omit(tlevel_out)
tlevel_out = data.frame(tlevel_out, check.names = FALSE, row.names = NULL)
head(tlevel_out)
aat = tlevel_out
tlevel_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 6, header = T)
# tlevel_out = tlevel_out[-c(1, nrow(tlevel_out)), ]
tlevel_out =  apply(tlevel_out, MARGIN = 2, FUN = as.numeric)
tlevel_out = na.omit(tlevel_out)
tlevel_out = data.frame(tlevel_out, check.names = FALSE, row.names = NULL)
identical(tlevel_out, aat)
out.file = "A_Level.out"
alevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 2, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
head(alevel_out)
tlevel_out2 = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 2, header = T)
head(alevel_out2)
head(tlevel_out2)
alevel_out =  apply(alevel_out, MARGIN = 2, FUN = as.numeric)
alevel_out = na.omit(alevel_out)
alevel_out = data.frame(alevel_out, check.names = FALSE, row.names = NULL)
at = alevel_out
alevel_out2 = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 2, header = T)
alevel_out =  apply(alevel_out, MARGIN = 2, FUN = as.numeric)
alevel_out = na.omit(alevel_out)
alevel_out = data.frame(alevel_out, check.names = FALSE, row.names = NULL)
identical(alevel_out, at)
alevel_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 2, header = T)
alevel_out =  apply(alevel_out, MARGIN = 2, FUN = as.numeric)
alevel_out = na.omit(alevel_out)
alevel_out = data.frame(alevel_out, check.names = FALSE, row.names = NULL)
astart_ind = which(alevel_out$`A-level` == 1)
sum_cols_ind = grep("sum", names(alevel_out))
sum_col_names = names(alevel_out)[sum_cols_ind]
for(i in 2: length(astart_ind)){
run1_totals = alevel_out[(astart_ind[i]-1), sum_cols_ind]
if(i == length(astart_ind)){
run_i_ind = astart_ind[i]:nrow(alevel_out)
} else {
run_i_ind = astart_ind[i]:(astart_ind[i+1]-1)
}
aout_j = alevel_out[run_i_ind, ]
for(j in sum_col_names) {
alevel_out[run_i_ind, j] = aout_j[, j] + run1_totals[[j]]
}
}
head(alevel_out)
plot(hTop~Time, alevel_out)
plot(hRoot~Time, alevel_out)
View(alevel_out)
alevel_out = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = T,
skip = 2, header = T)
alevel_out =  apply(alevel_out, MARGIN = 2, FUN = as.numeric)
alevel_out = na.omit(alevel_out)
alevel_out = data.frame(alevel_out, check.names = FALSE, row.names = NULL)
astart_ind = which(alevel_out$`A-level` == 1)
sum_cols_ind = grep("sum", names(alevel_out))
sum_col_names = names(alevel_out)[sum_cols_ind]
View(alevel_out)
sum_col_names
for(i in 2: length(astart_ind)){
run1_totals = alevel_out[(astart_ind[i]-1), sum_cols_ind]
if(i == length(astart_ind)){
run_i_ind = astart_ind[i]:nrow(alevel_out)
} else {
run_i_ind = astart_ind[i]:(astart_ind[i+1]-1)
}
aout_j = alevel_out[run_i_ind, ]
for(j in sum_col_names) {
alevel_out[run_i_ind, j] = aout_j[, j] + run1_totals[[j]]
}
}
head(alevel_out)
plot(`sum(rTop)`~Time, alevel_out)
plot(`sum(vTop)`~Time, alevel_out)
library(hydrusR)
library(data.table)
library(dplyr)
## Basic inputs
profile_depth = 200
ntimes = 3000
tstep = 1
deltaz = 1
rdepth = 100
time_step = 1
soil_para = list(thr = 0.045, ths = 0.43,
Alfa = 0.145, n = 2.69,Ks = 29.7, l = 0.45)
# hydrus_path =  "C:/Program Files (x86)/PC-Progress/Hydrus-1D 4.xx"
hydrus_path = "/home/sacharya/.PlayOnLinux/wineprefix/Hydrus_1D/drive_c/Program Files/PC-Progress/Hydrus-1D 4.xx"
project_name = "h1dExample"
parent_dir = path.expand("~")
project_path = path.expand(file.path(parent_dir, project_name))
## Basic inputs
TimeUnit = "cm" ## Space units
SpaceUnit = "hours" ## time units
PrintTimes = 1
show_output = T
##Process inputs
rwu = T   ###  rootwater uptake
##Profile/geometry inputs
profile_nodes = seq(0, profile_depth, by = deltaz)
initial_wtable = 30
obs_nodes_all = seq(20, profile_depth, by = 20)
nObsNodes = length(obs_nodes_all)
rooting_depth = 120
### Time inputs
endTime = ntimes ### total time steps
total_timesteps = endTime/tstep
ntimesteps = length(1:total_timesteps)
## LAI and pet
input_pet = TRUE
LAI = 4.0
et_rate = 0.6
## Boundary conditions inputs
const_botbc = TRUE
bot_bc_type = "flux"
const_botFlux = 0.0000 ##### in cm/hr
### Atmospheric top boundary conditions
atm_bc_data = data.frame(tAtm = seq(time_step, endTime, tstep),
Prec = numeric(ntimesteps),
rSoil = numeric(ntimesteps),
rRoot = numeric(ntimesteps),
hCritA = rep(10000, ntimesteps),
rB = numeric(ntimesteps),
hB = numeric(ntimesteps),
ht = numeric(ntimesteps),
RootDepth = numeric(ntimesteps))
const_et = rep(et_rate, 365)
hourly_et =  et.hourly(Et.Daily = const_et)
hourly_et = hourly_et[rep(seq_len(nrow(hourly_et)), each = 1/time_step), ] ### for 0.25 time steps
hourly_et = dplyr::mutate(hourly_et, et = et/(1/time_step))
hourly_et$rSoil = hourly_et$et/2
hourly_et$rRoot = hourly_et$et/2
if(isTRUE(input_pet)) {
atm_bc_data$rRoot = rep(LAI, nrow(atm_bc_data))
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
} else {
atm_bc_data$rRoot = hourly_et$rRoot[1:nrow(atm_bc_data)]
atm_bc_data$rSoil = hourly_et$rSoil[1:nrow(atm_bc_data)]
}
if(isTRUE(const_botbc)){
atm_bc_data$hB = rep(0, nrow(atm_bc_data))
}
atm_bc_data = atm_bc_data[1:ntimesteps, ]
#### Creates a blank hydrus project with three files
create.H1D.project(project.name = project_name, parent.dir = parent_dir,
TimeUnit = TimeUnit, PrintTimes = PrintTimes,
processes = c(WaterFlow = T, RootWaterUptake = rwu),
geometry = c(ProfileDepth = profile_depth,
NumberOfNodes = length(profile_nodes),
ObservationNodes = nObsNodes))
### create the soil profile (PROFILE.DAT) info
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
write.ini.cond(project.path = project_path, wt.depth = initial_wtable)
write.root.dist(project.path = project_path,  rdepth = rooting_depth, rbeta = 0.962)
write.hydraulic.para(project.path = project_path, para = soil_para)
write.bottom.bc(constant.bc = TRUE, bc.type = bot_bc_type,
bc.value = const_botFlux, project.path = project_path)
##### Default hydrus path in Windows
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = tstep,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE,atm.bc.data = atm_bc_data, TimeUnit = TimeUnit,
show.output = show_output)
