pressure_vec = head_profile$Head
head(head_profile)
h1d_output2 =    data.table::fread(input = file.path(project.path, "Nod_Inf.out"),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
time_ind = grep("Time:", h1d_output2[["Node"]])
to_skip = time_ind[length(time_ind)]+2
head_profile = h1d_output2[to_skip:nrow(h1d_output2), c("Node", "Depth", "Head")]
ax = head_profile
head_profile = as.data.frame(apply(head_profile, 2, as.numeric))
head_profile = na.omit(head_profile)
ay = head_profile
identical(ax, ay)
head(ax)
head(ay)
ax = as.data.frame(apply(ax, 2, as.numeric))
ax = na.omit(ax)
identical(ax, ay)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/run_H1D_simulation.R', echo=TRUE)
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
write.ini.cond(project.path = project_path, wt.depth = initial_wtable)
write.root.dist(project.path = project_path,  rdepth = rooting_depth, rbeta = 0.962)
write.hydraulic.para(project.path = project_path, para = soil_para)
write.bottom.bc(constant.bc = TRUE, bc.type = bot_bc_type,
bc.value = const_botFlux, project.path = project_path)
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = tstep,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE,atm.bc.data = atm_bc_data, TimeUnit = TimeUnit,
show.output = T)
project.path
options(warn = -1)
if(warn == TRUE) options(warn = 0)
nod_inf = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
head(nod_inf)
time_lines = nod_inf[grepl("Time:", nod_inf[, Node]), ]
times = as.numeric(time_lines[, Depth])
nod_inf = nod_inf[-(1:12), ]
for (col in colnames(nod_inf)) set(nod_inf, j=col, value= as.numeric(nod_inf[[col]]))
nod_inf = na.omit(nod_inf)
nodes = unique(nod_inf[,Node])
nodes
class(nodes)
class(nod_inf)
at = nod_inf[, Node]
head(at)
ay = nod_Inf[["Node"]]
ay = nod_inf[["Node"]]
head(ay)
axt = data.frame(nod_inf)
az = axt[["Node"]]
head(ax)
head(az)
nodes = unique(nod_inf[["Node"]])
nod_inf[, Time:= rep(times, each = length(nodes))]
head(nod_inf)
output_names = intersect(output, colnames(nod_inf))
output = NULL
if(is.null(output) | missing(output)) {
output = c("Head", "Moisture", "K", "C", "Flux",
"Sink", "Kappa", "v/KsTop", "Temp")
}
output_names = intersect(output, colnames(nod_inf))
output_names = c("Time", "Node", "Depth", output_names)
output_names
not_needed = colnames(nod_inf)[!(colnames(nod_inf) %in% output_names)]
not_needed
dropped_cols = colnames(nod_inf)[!(colnames(nod_inf) %in% output_names)]
nod_out = nod_inf[, .SD, .SDcols = output_names]
head(nod_out)
tail(nod_out)
options(warn = -1)
if(warn == TRUE) options(warn = 0)
nod_inf = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
# colnames(nod_inf) = as.character(nod_inf[10, ])
time_lines = nod_inf[grepl("Time:", nod_inf[, Node]), ]
times = as.numeric(time_lines[, Depth])
nod_inf = nod_inf[-(1:12), ]
for (col in colnames(nod_inf)) set(nod_inf, j=col, value= as.numeric(nod_inf[[col]]))
# nod_inf[, colnames(nod_inf) := lapply(.SD, as.numeric), .SDcols = colnames(nod_inf)]
nod_inf = na.omit(nod_inf)
nodes = unique(nod_inf[["Node"]])
nodes
nodes = sort(nodes)
nodes
nodes = sort(unique(nod_inf[["Node"]]))
nod_inf[, Time:= rep(times, each = length(nodes))]
tail(nod_inf)
times
head(times)
max(times)
length(times)
head(time_lines)
times = as.numeric(time_lines[[2]])
head(times)
tail(times)
length(nodes)
options(warn = -1)
if(warn == TRUE) options(warn = 0)
nod_inf = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
# colnames(nod_inf) = as.character(nod_inf[10, ])
time_lines = nod_inf[grepl("Time:", nod_inf[, Node]), ]
times = as.numeric(time_lines[[2]])
nod_inf = nod_inf[-(1:12), ]
for (col in colnames(nod_inf)) set(nod_inf, j=col, value= as.numeric(nod_inf[[col]]))
# nod_inf[, colnames(nod_inf) := lapply(.SD, as.numeric), .SDcols = colnames(nod_inf)]
nod_inf = na.omit(nod_inf)
nodes = sort(unique(nod_inf[["Node"]]))
nod_inf[, Time:= rep(times, each = length(nodes))]
head(nod_inf)
tail(nod_inf)
tts = rep(times, each = length(nodes))
tail(tts)
View(nod_inf)
times
length(times)
length(nodes)
head(nod_inf)
nod_inf = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
# colnames(nod_inf) = as.character(nod_inf[10, ])
time_lines = nod_inf[grepl("Time:", nod_inf[, Node]), ]
times = as.numeric(time_lines[[2]])
for (col in colnames(nod_inf)) set(nod_inf, j=col, value= as.numeric(nod_inf[[col]]))
# nod_inf[, colnames(nod_inf) := lapply(.SD, as.numeric), .SDcols = colnames(nod_inf)]
nod_inf = na.omit(nod_inf)
nodes = sort(unique(nod_inf[["Node"]]))
nod_inf[, Time:= rep(times, each = length(nodes))]
tail(nod_inf)
nod_inf = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
# colnames(nod_inf) = as.character(nod_inf[10, ])
time_lines = nod_inf[grepl("Time:", nod_inf[, Node]), ]
times = as.numeric(time_lines[[2]])
for (col in colnames(nod_inf)) set(nod_inf, j=col, value= as.numeric(nod_inf[[col]]))
# nod_inf[, colnames(nod_inf) := lapply(.SD, as.numeric), .SDcols = colnames(nod_inf)]
nod_inf = na.omit(nod_inf)
nodes = sort(unique(nod_inf[["Node"]]))
head(nod_inf)
tail(nod_inf)
dim(nod_inf)
View(nod_inf)
301902/1500
head(times)
nod_inf = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
# colnames(nod_inf) = as.character(nod_inf[10, ])
time_lines = nod_inf[grepl("Time:", nod_inf[, Node]), ]
times = c(0, as.numeric(time_lines[[2]]))
for (col in colnames(nod_inf)) set(nod_inf, j=col, value= as.numeric(nod_inf[[col]]))
1501*201
length(times)
head(nod_inf)
plot(nod_inf$Moisture, type = "l")
plot(nod_inf$Moisture[1:201], type = "l")
beginTnew
sim_times_s
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/run_H1D_simulation.R', echo=TRUE)
create.H1D.project(project.name = project_name, parent.dir = parent_dir,
TimeUnit = TimeUnit, PrintTimes = PrintTimes,
processes = c(WaterFlow = T, RootWaterUptake = rwu),
geometry = c(ProfileDepth = profile_depth,
NumberOfNodes = length(profile_nodes),
ObservationNodes = nObsNodes))
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
write.ini.cond(project.path = project_path, wt.depth = initial_wtable)
write.root.dist(project.path = project_path,  rdepth = rooting_depth, rbeta = 0.962)
write.hydraulic.para(project.path = project_path, para = soil_para)
write.bottom.bc(constant.bc = TRUE, bc.type = bot_bc_type,
bc.value = const_botFlux, project.path = project_path)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/run_H1D_simulation.R', echo=TRUE)
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = tstep,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE,atm.bc.data = atm_bc_data, TimeUnit = TimeUnit,
show.output = T)
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/run_H1D_simulation.R', echo=TRUE)
create.H1D.project(project.name = project_name, parent.dir = parent_dir,
TimeUnit = TimeUnit, PrintTimes = PrintTimes,
processes = c(WaterFlow = T, RootWaterUptake = rwu),
geometry = c(ProfileDepth = profile_depth,
NumberOfNodes = length(profile_nodes),
ObservationNodes = nObsNodes))
### create the soil profile (PROFILE.DAT) info
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
create.H1D.project(project.name = project_name, parent.dir = parent_dir,
TimeUnit = TimeUnit, PrintTimes = PrintTimes,
processes = c(WaterFlow = T, RootWaterUptake = rwu),
geometry = c(ProfileDepth = profile_depth,
NumberOfNodes = length(profile_nodes),
ObservationNodes = nObsNodes))
create.soil.profile(project.path = project_path, out.file = "PROFILE.DAT",
profile.depth = profile_depth, dz = deltaz)
##Write root distribution
write.obs.nodes(project.path = project_path, obs.nodes = obs_nodes_all)
write.ini.cond(project.path = project_path, wt.depth = initial_wtable)
write.root.dist(project.path = project_path,  rdepth = rooting_depth, rbeta = 0.962)
write.hydraulic.para(project.path = project_path, para = soil_para)
write.bottom.bc(constant.bc = TRUE, bc.type = bot_bc_type,
bc.value = const_botFlux, project.path = project_path)
##### Default hydrus path in Windows
run.H1D.simulation(project.path = project_path, hydrus.path = hydrus_path,
profile.depth = profile_depth,
beginT = 0, endT = endTime, deltaT = tstep,
bot.bc.type = bot_bc_type, bot.bc.value = const_botFlux,
const.bot.bc = TRUE,atm.bc.data = atm_bc_data, TimeUnit = TimeUnit,
show.output = T)
nod_inf = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
# colnames(nod_inf) = as.character(nod_inf[10, ])
time_lines = nod_inf[grepl("Time:", nod_inf[, Node]), ]
head(time_lines)
time_lines = nod_inf[grepl("Time:", nod_inf[["Node"]]), ]
head(time_lines)
times = c(0, as.numeric(time_lines[[2]]))
times
length(times)
dim(time_lines)
dim(nod_inf)
nod_inf = na.omit(nod_inf)
nodes = sort(unique(nod_inf[["Node"]]))
nodes
length(nodes)
nod_inf = data.table::fread(input = file.path(project.path, out.file),
fill = TRUE, blank.lines.skip = FALSE, skip = 10)
# colnames(nod_inf) = as.character(nod_inf[10, ])
time_lines = nod_inf[grepl("Time:", nod_inf[["Node"]]), ]
times = c(0, as.numeric(time_lines[[2]]))
for (col in colnames(nod_inf)) set(nod_inf, j=col, value= as.numeric(nod_inf[[col]]))
nod_inf = na.omit(nod_inf)
nodes = sort(unique(nod_inf[["Node"]]))
head(nodes)
length(nodes)
head(nod_inf)
dim(nod_inf)
lenght(times)
length(times)
length(times)*201
nod_inf[, Time:= rep(times, each = length(nodes))]
tail(nod_inf)
times
times[duplicated(times)]
tail(nod_inf)
dup_times = times[duplicated(time)]
dup_times = times[duplicated(times)]
dup_times
nod_inf = nod_inf[!Time %in% dup_times, ]
head(nod_inf)
unique(nod_inf$Time)
any(duplicated(unique(nod_inf$Time))
)
output_names = intersect(output, colnames(nod_inf))
output_names = c("Time", "Node", "Depth", output_names)
nod_out = nod_inf[, .SD, .SDcols = output_names]
head(nod_out)
tail(nod_inf)
head(node_out)
head(nod_out)
output_names = intersect(output, colnames(nod_inf))
output_names = c("Time", "Node", "Depth", output_names)
output_names
output_names = intersect(output, colnames(nod_inf))
output_names
output_names = c("Time", "Node", "Depth", output_names)
nod_out = nod_inf[, .SD, .SDcols = output_names]
nod_out
head9nod_out
head(nod_out)
tail(nod_out)
plot(Moisture~Depth, filter(nod_out, Time== 0))
plot(Moisture~Depth, filter(nod_out, Time== 0), type = "l")
lines(Moisture~Depth, filter(nod_out, Time== 1), type = "l")
lines(Moisture~Depth, filter(nod_out, Time== 2), type = "l")
lines(Moisture~Depth, filter(nod_out, Time== 10), type = "l")
lines(Moisture~Depth, filter(nod_out, Time== 100), type = "l")
lines(Moisture~Depth, filter(nod_out, Time== 200), type = "l")
lines(Moisture~Depth, filter(nod_out, Time== 500), type = "l")
lines(Moisture~Depth, filter(nod_out, Time== 1000), type = "l")
lines(Moisture~Depth, filter(nod_out, Time== 1500), type = "l")
source('C:/Users/sacharya/Google Drive/R/RPackages/hydrusR/R/read_node_inf.R', echo=TRUE)
output
output = NULL
if(is.null(output) | missing(output)) {
output = c("sum(rTop)", "sum(rRoot)", "sum(vTop)", "sum(vRoot)",
"sum(vBot)", "hTop", "hRoot", "hBot", "A-level")
}
alevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 2, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
alevel_out = alevel_out[-c(1, nrow(alevel_out)), ]
if(is.null(output) | missing(output)) {
output = c("sum(rTop)", "sum(rRoot)", "sum(vTop)", "sum(vRoot)",
"sum(vBot)", "hTop", "hRoot", "hBot", "A-level")
}
alevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 2, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
out.file
out.file = "A_Level.out"
if(is.null(output) | missing(output)) {
output = c("sum(rTop)", "sum(rRoot)", "sum(vTop)", "sum(vRoot)",
"sum(vBot)", "hTop", "hRoot", "hBot", "A-level")
}
alevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 2, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
head(alevel_out)
alevel_out = alevel_out[-c(1, nrow(alevel_out)), ]
head(alevel_out)
View(aleve_out)
alevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 2, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
View(alevel_out)
alevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 2, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
# alevel_out = alevel_out[-c(1, nrow(alevel_out)), ]
alevel_out =
alevel_out =  apply(alevel_out, MARGIN = 2, FUN = as.numeric)
alevel_out = na.omit(alevel_out)
alevel_out = data.frame(alevel_out, check.names = FALSE, row.names = NULL)
head(alevel_out)
tail(alevel_out)
plot(hTop~Time, alevel_out)
plot(hTop~Time, alevel_out, type = "l")
plot(hTop~Time, alevel_out[1:200, ], type = "l")
plot(hTop~Time, alevel_out[1:500, ], type = "l")
plot(`sum(rTop)`~Time, alevel_out[1:500, ], type = "l")
plot(`sum(rTop)`~Time, alevel_out[1:1500, ], type = "l")
alevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 2, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
head(alevel_out)
out.file = "T_Level.out"
if(is.null(output) | missing(output)) {
output = output = c("rTop", "rRoot", "vTop", "vRoot",
"vBot", "sum(rTop)", "sum(rRoot)",
"sum(vTop)", "sum(vRoot)", "sum(vBot)",
"hTop", "hRoot", "hBot", "RunOff",
"sum(Runoff)", "Volume", "sum(Infil)",
"sum(Evap)", "TLevel", "Cum(WTrans)",
"SnowLayer")
}
tlevel_out<- read.table(file.path(project.path, out.file),
header = T, sep = "", dec = ".",
na.strings = "NA", colClasses = NA, as.is = TRUE,
skip = 6, check.names = FALSE, fill = T,
strip.white = FALSE, blank.lines.skip = TRUE,
comment.char = "#",
allowEscapes = FALSE, flush = FALSE,
stringsAsFactors = default.stringsAsFactors(),
fileEncoding = "", encoding = "unknown")
tlevel_out =  apply(tlevel_out, MARGIN = 2, FUN = as.numeric)
tlevel_out = na.omit(tlevel_out)
tlevel_out = data.frame(tlevel_out, check.names = FALSE, row.names = NULL)
head(tlevel_out)
plot(tlevel_out$`sum(rTop)`, type = "l")
plot(cumsum(tlevel_out$rTop, type = "l")
)
plot(cumsum(tlevel_out$rTop), type = "l")
lines(tlevel_out$`sum(rTop)`, col = "red")
plot(cumsum(tlevel_out$rRoot), type = "l")
lines(tlevel_out$`sum(rRoot)`, col = "red")
tleve_out$smroot = cumsum(tlevel_out$rRoot)
tlevel_out$smroot = cumsum(tlevel_out$rRoot)
View(tlevel_out)
plot(sumroot~`sum(fRoot)`, tlevel_out)
plot(smroot~`sum(fRoot)`, tlevel_out)
plot(smroot~`sum(fRoot)`, tlevel_out)
plot(smroot~`sum(rRoot)`, tlevel_out)
View(tlevel_out[, c("Time", "smroot", `sum(rRoot)``])
)
View(tlevel_out[, c("Time", "smroot", `sum(rRoot)`])
View(tlevel_out[, c("Time", "smroot", "sum(rRoot)"])
View(tlevel_out[, c("Time", "smroot", "sum(rRoot)")])
plot(tlevel_out$vTop, type = "l")
plot(tlevel_out$vBot, type = "l")
plot(tlevel_out$vRoot, type = "l")
plot(vRoot~Time, type = "l")
plot(vRoot~Time, tlevel_out, type = "l")
plot(cumsum(tlevel_out$vRoot))
plot(tlevel_out$Time, cumsum(tlevel_out$vRoot))
plot(tlevel_out$Time, cumsum(tlevel_out$vRoot), type = "l")
lines(tlevel_out$Time, tlevel_out$`sum(vRoot)`, type = "l")
plot(cumsum(tlevel_out$`sum(vRoot)`))
plot(tlevel_out$Time, cumsum(tlevel_out$`sum(vRoot)`))
plot(cumsum(tlevel_out$`sum(vRoot)`))
plot(cumsum(tlevel_out$`sum(vRoot)`)*0.25)
plot(cumsum(tlevel_out$vRoot*0.25)
)
att = plot(tlevel_out$Time, cumsum(tlevel_out$vRoot*0.25))
att = plot(tlevel_out$Time, cumsum(tlevel_out$`sum(vRoot`))
head(tlevel_out)
att = plot(tlevel_out$Time, cumsum(tlevel_out$vRoot * tlevel_out$Time))
View(tlevel_out
)
att = plot(tlevel_out$Time, tlevel_out$rTop)
att = plot(tlevel_out$Time, tlevel_out$rTop, type = "l")
att = plot(tlevel_out$Time, tlevel_out$rRoot)
att = plot(tlevel_out$Time, tlevel_out$rRoot, type = "l")
sum(tlevel_out$rRoot)
max(tlevel_out$`sum(rRoot)`
)
sum(tlevel_out$vRoot)
max(tlevel_out$`sum(vRoot)`
)
sum(tleve_out$vRoot)
sum(tlevel_out$vRoot)
head(atm.bc.data)
plot(rSoil~tAtm, atm.bc.data)
plot(rSoil~tAtm, atm.bc.data, type = "l")
lines(rRoot~Time, tlevel_out, col = "red")
plot(cumsum(tlevel_out$rRoot))
plot(cumsum(tlevel_out$rRoot), type = "l")
lines(cumsum(atm.bc.data$rSoil), col = "red")
dim(atm.bc.data)
lines(cumsum(atm.bc.data$rTop), col = "red")
plot(cumsum(atm.bc.data$rTop), col = "red")
plot(cumsum(atm.bc.data$rSoil), col = "red")
plot(cumsum(atm.bc.data$rSoil), col = "red", type = "l")
lines(cumsum(atm.bc.data$rTop), col = "red")
lines(cumsum(atm.bc.data$rTop), col = "black")
lines(cumsum(tlevel_out$rTop))
lines(cumsum(tlevel_out$rTop)/0.25)
head(tlevel_out)
plot(vTop~Time, tlevel_out)
plot(vTop~Time, tlevel_out, type = "l")
plot(vTop~Time, tlevel_out[1:200, ], type = "l")
plot(vTop~Time, tlevel_out[1:500, ], type = "l")
plot(`sum(Evap)`~Time, tlevel_out[1:500, ], type = "l")
plot(`sum(Evap)`~Time, tlevel_out, type = "l")
plot(`sum(rTop)`~Time, tlevel_out, type = "l")
plot(`sum(vTop)`~Time, tlevel_out, type = "l")
lines(`sum(Evap)`~Time, tlevel_out, type = "l", col = "red")
plot(cumsum(vTop)~Time, tlevel_out, type = "l")
plot(tlevel_out$Time, cumsum(tlevel_out$vTop))
plot(tlevel_out$Time, cumsum(tlevel_out$vTop), type = "l")
plot(tlevel_out$Time, cumsum(tlevel_out$rTop), type = "l")
plot(`sum(rTop)`~Time, tlevel_out)
sum(tlevel_out$rTop)
max(tlevel_out$`sum(rTop)`)
max(tlevel_out[1:960, ]$`sum(rTop)`)
max(tlevel_out[961:1500, ]$`sum(rTop)`)
axt = diff(tlevel_out$`sum(rTop)`)
head(axt)
sum(axt)
att = max(tlevel_out[1:960, ]$`sum(rTop)`)
aty = att + 2.5215
aty
View(tlevel_out)
aa = 2.5216
tlevel_out[961:1500, "sum(rTop)"] = aa + tlevel_out[961:1500, "sum(rTop)"]
plot(tlevel_out$`sum(rTop)`)
1.410 + 2.52
sum(tlevel_out$rTop)
sum(tlevel_out$rRoot)
plot(tlevel_out$Time, tlevel_out$`sum(rRoot)`)
max(tlevel_out$`sum(rRoot)`
)
plot(cumsum(tlevel_out$rRoot))
plot(cumsum(tlevel_out$vTop))
plot(cumsum(tlevel_out$vRoot))
