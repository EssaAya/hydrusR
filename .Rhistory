get.new.nodes<-function(wt, smc, obs_points){
sat_ind = which(obs_points >= wt)
unsat_ind = which(obs_points < wt)
sat_nodes = obs_points[sat_ind]
unsat_nodes = obs_points[unsat_ind]
if(length(unsat_nodes) == 0) {
new_nodes = c(wt, sat_nodes)
new_smc = c(smc[sat_ind[1]], smc)
} else if(length(sat_nodes) == 0) {
new_nodes = c(unsat_nodes, wt)
new_smc = c(smc, smc[length(smc)])
} else {
new_nodes = c(unsat_nodes, wt, sat_nodes)
new_smc = c(smc[unsat_ind], smc[sat_ind[1]], smc[sat_ind])
}
dup = which(duplicated(new_nodes))
if(length(dup) >0){
new_nodes = new_nodes[ -dup]
new_smc = new_smc[-dup]
}
return(data.frame(nodes = new_nodes, smc = new_smc))
}
n = 1
str_ind = paste("_", node_widths[n], "cm", sep = "")
node_n = grep(str_ind, out_files)
outfiles_n = out_files[node_n]
obs_points = nodes_list[[n]]
allout_file = outfiles_n[grep("_smc_all_", outfiles_n)]
obsnodes_file = outfiles_n[grep("_smc_obs_", outfiles_n)]
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
dim(obsnodes_smc)
obsnodes_smc = obsnodes_smc[!duplicated(obsnodes_smc$Time), ]
dim(obsnodes_smc)
tt2 = obsnodes_smc
head(tt2)
tt2 = obsnodes_smc$Time
head(tt2)
head(tt1)
head(tt1)
length(tt1)
length(tt2)
xx = !(tt2%in%tt1)
length(xx)
head(xx)
xx = tt2[!(tt2%in%tt1)]
length(xx)
head(xx)
rem_time = obsnodes_smc$Time%%tstep
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
tstep
rem_time = obsnodes_smc$Time%%tstep
obsnodes_smc = obsnodes_smc[rem_time ==0, ]
dim(obsnodes_smc)
head(rem_time)
tstep
rem_time = obsnodes_smc$Time%%tstep
head(rem_time)
rem_time
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
tstep
rem_time = obsnodes_smc$Time%%tstep
length(rem_time)
length(rem_time)
head(rem_time)
head(rem_time, 40)
head(obsnodes_smc$Time, 40)
at = head(obsnodes_smc$Time, 40)
at%%0.25
0.75%%0.25
class(ax)
class(at)
tstep
class(tstep)
at %% tstep
1.25 %% 0.25
0.75 %% 0.25
1.25 %% 0.25
at
at %% tstep
tstep
at/tt
at/tt
at/tstep
remainder
?operator
?`+`
at %/%tstep
mod
rem_time = obsnodes_smc$Time%/%tstep
head(rem_time)
at = rem_time[!is.integer(rem_time)]
at
head(at)
class(at)
plot(at)
rem_time = obsnodes_smc$Time%%tstep
max(rem_time)
min(rem_time)
unique(rem_time)
at = unique(rem_time)
length(at)
head(at)
class(at)
at[!duplicated(at)]
head(at)
at = as.numeric(at)
head(at)
at[!duplicated(at)]
at = at[!duplicated(at)]
head(at)
at = head(at)
at
duplicated(at)
at[1]
at[2]
all.equal(at[2:4])
all.equal(at[2:4], at[5:6])
all.equal(at[2:4], at[5:7])
at[2:7]
head(obsnodes_smc[, 1:20], 10)
at[1:20]
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
at
class9at
class(at)
rem_time = obsnodes_smc$Time%%tstep
head(rem_time)
head(rem_time, 20)
at = as.numeric(rem_time)
head(at, 20)
tt = unique(at)
length(tt)
clas(at)
class(at)
head(at)
plot(at)
unique(at)
unique(at[1:20])
ax = at[1:20]
at
ax
unique(ax)
unique?
duplicated(ax)
ax = as.character(ax)
unique(ax)
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
tt = obsnodes_smc$Time
tt = tt[1:50]
tt
as.character(tt)
tt = as.numeric(tt)
tt = sprintf("%2f", tt)
tt
tt = sprintf(".%2f", tt)
tt = sprintf("%2f", tt)
?sprintf
tt = as.numeric(tt)
tt
tt = sprintf("%.2f", tt)
tt
tt = as.numeric(tt)
tt
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
obsnodes_smc$Time = as.numeric((sprintf("%.3f", obsnodes_smc$Time))
)
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
rem_time = obsnodes_smc$Time%%tstep
tstep
head(rem_time)
obsnodes_smc = obsnodes_smc[rem_time ==0, ]
dim(obsnodes_smc)
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
obsnodes_smc$Time = as.numeric(sprintf("%.3f", obsnodes_smc$Time))
head(obsnodes_smc)
at = duplicated(obsnodes_smc$Time)
length(at)
head(at)
at[at == T]
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
obsnodes_smc$Time = as.numeric(sprintf("%.3f", obsnodes_smc$Time))
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
rem_time = obsnodes_smc$Time%%tstep
obsnodes_smc = obsnodes_smc[rem_time ==0, ]
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
obsnodes_smc = obsnodes_smc[!duplicated(obsnodes_smc$Time), ]
obsnodes_smc$Time = as.numeric(sprintf("%.3f", obsnodes_smc$Time))
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
rem_time = obsnodes_smc$Time%%tstep
obsnodes_smc = obsnodes_smc[rem_time ==0, ]
dim(obsnodes_smc)
n = 2
str_ind = paste("_", node_widths[n], "cm", sep = "")
node_n = grep(str_ind, out_files)
outfiles_n = out_files[node_n]
obs_points = nodes_list[[n]]
allout_file = outfiles_n[grep("_smc_all_", outfiles_n)]
obsnodes_file = outfiles_n[grep("_smc_obs_", outfiles_n)]
# get.new.smc<- function(nodes.all, smc, new.nodes, ...){
#
#       if(!is.numeric(smc)) smc = as.numeric(smc)
#       if(is.list(new.nodes)) new.nodes = new.nodes[[1]]
#
#    new_ind = which(nodes.all %in% new.nodes)
#        new_smc = c(smc[new_ind], smc[(max(new_ind)+1)], smc[(max(new_ind)+1)])
#  new_smc = new_smc[1:length(new.nodes)]
#  return(data.frame(node = new.nodes, smc = new_smc))
#
# }
###################
# obsnodes_smc = fread(file.path(compiled_output_path, obsnodes_file),
#                                 sep = ",", header = T)
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
obsnodes_smc = obsnodes_smc[!duplicated(obsnodes_smc$Time), ]
obsnodes_smc$Time = as.numeric(sprintf("%.3f", obsnodes_smc$Time))
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
rem_time = obsnodes_smc$Time%%tstep
obsnodes_smc = obsnodes_smc[rem_time ==0, ]
dim(obsnodes_smc
)
n = 3
str_ind = paste("_", node_widths[n], "cm", sep = "")
node_n = grep(str_ind, out_files)
outfiles_n = out_files[node_n]
obs_points = nodes_list[[n]]
allout_file = outfiles_n[grep("_smc_all_", outfiles_n)]
obsnodes_file = outfiles_n[grep("_smc_obs_", outfiles_n)]
# get.new.smc<- function(nodes.all, smc, new.nodes, ...){
#
#       if(!is.numeric(smc)) smc = as.numeric(smc)
#       if(is.list(new.nodes)) new.nodes = new.nodes[[1]]
#
#    new_ind = which(nodes.all %in% new.nodes)
#        new_smc = c(smc[new_ind], smc[(max(new_ind)+1)], smc[(max(new_ind)+1)])
#  new_smc = new_smc[1:length(new.nodes)]
#  return(data.frame(node = new.nodes, smc = new_smc))
#
# }
###################
# obsnodes_smc = fread(file.path(compiled_output_path, obsnodes_file),
#                                 sep = ",", header = T)
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
obsnodes_smc = obsnodes_smc[!duplicated(obsnodes_smc$Time), ]
obsnodes_smc$Time = as.numeric(sprintf("%.3f", obsnodes_smc$Time))
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
rem_time = obsnodes_smc$Time%%tstep
obsnodes_smc = obsnodes_smc[rem_time ==0, ]
dim(obsnodes_smc)
n = 3
n = 4
str_ind = paste("_", node_widths[n], "cm", sep = "")
node_n = grep(str_ind, out_files)
outfiles_n = out_files[node_n]
obs_points = nodes_list[[n]]
allout_file = outfiles_n[grep("_smc_all_", outfiles_n)]
obsnodes_file = outfiles_n[grep("_smc_obs_", outfiles_n)]
# get.new.smc<- function(nodes.all, smc, new.nodes, ...){
#
#       if(!is.numeric(smc)) smc = as.numeric(smc)
#       if(is.list(new.nodes)) new.nodes = new.nodes[[1]]
#
#    new_ind = which(nodes.all %in% new.nodes)
#        new_smc = c(smc[new_ind], smc[(max(new_ind)+1)], smc[(max(new_ind)+1)])
#  new_smc = new_smc[1:length(new.nodes)]
#  return(data.frame(node = new.nodes, smc = new_smc))
#
# }
###################
# obsnodes_smc = fread(file.path(compiled_output_path, obsnodes_file),
#                                 sep = ",", header = T)
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
obsnodes_smc = obsnodes_smc[!duplicated(obsnodes_smc$Time), ]
obsnodes_smc$Time = as.numeric(sprintf("%.3f", obsnodes_smc$Time))
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
rem_time = obsnodes_smc$Time%%tstep
obsnodes_smc = obsnodes_smc[rem_time ==0, ]
dim(obsnodes_smc)
n = 5
str_ind = paste("_", node_widths[n], "cm", sep = "")
node_n = grep(str_ind, out_files)
outfiles_n = out_files[node_n]
obs_points = nodes_list[[n]]
allout_file = outfiles_n[grep("_smc_all_", outfiles_n)]
obsnodes_file = outfiles_n[grep("_smc_obs_", outfiles_n)]
# get.new.smc<- function(nodes.all, smc, new.nodes, ...){
#
#       if(!is.numeric(smc)) smc = as.numeric(smc)
#       if(is.list(new.nodes)) new.nodes = new.nodes[[1]]
#
#    new_ind = which(nodes.all %in% new.nodes)
#        new_smc = c(smc[new_ind], smc[(max(new_ind)+1)], smc[(max(new_ind)+1)])
#  new_smc = new_smc[1:length(new.nodes)]
#  return(data.frame(node = new.nodes, smc = new_smc))
#
# }
###################
# obsnodes_smc = fread(file.path(compiled_output_path, obsnodes_file),
#                                 sep = ",", header = T)
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
obsnodes_smc = obsnodes_smc[!duplicated(obsnodes_smc$Time), ]
obsnodes_smc$Time = as.numeric(sprintf("%.3f", obsnodes_smc$Time))
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
rem_time = obsnodes_smc$Time%%tstep
obsnodes_smc = obsnodes_smc[rem_time ==0, ]
dim(obsnodes_smc)
source('~/Hydrus1D/Rscripts/tsm_hybrid.R')
source('~/Hydrus1D/Rscripts/et_from_tsm.R')
et_pred = et_pred[et_pred$et_wt >=0, ]
plot(et_pred$wt_avg, et_pred$X50, pch = 16, type = "l")
points(et_pred$wt_avg, et_pred$eta)
lines(et_pred$wt_avg, et_pred$X50, col = "red")
plot(X50~eta, data = et_pred, pch = 16, col = "dodgerblue")
abline(a = 0, b = 1, col = "red", lwd = 2)
plot(X10~eta, data = et_pred, pch = 16, col = "dodgerblue")
abline(a = 0, b = 1, col = "red", lwd = 2)
if(hybrid_tsm == TRUE){
etfile = file.path(compiled_output_path, paste("et_tsm_hybrid_", soil_type, ".txt", sep = ""))
dtsmfile = file.path(compiled_output_path, paste("delta_tsm_hybrid_", soil_type, ".txt", sep = ""))
file.path(compiled_output_path, paste("gwflux_pred_hybrid", soil_type, ".txt", sep = ""))
}else {
etfile = file.path(compiled_output_path, paste("et_tsm_", soil_type, ".txt", sep = ""))
dtsmfile = file.path(compiled_output_path, paste("delta_tsm_", soil_type, ".txt", sep = ""))
file.path(compiled_output_path, paste("gwflux_pred_", soil_type, ".txt", sep = ""))
}
write.csv(et_pred,file = etfile,row.names = F)
write.csv(delta_tsm,file = dtsmfile, row.names = F)
write.csv(gw_flux, file = gwflusfile,  row.names = F)
write.csv(et_pred_wt,
file = file.path(compiled_output_path, paste("et_fromwt_", soil_type, ".txt", sep = "")),
row.names = F)
file_string = ifelse(hybrid_tsm == TRUE,
paste("ET_estimates_nodes_hybrid_", soil_type, ".pdf", sep = ""),
paste("ET_estimates_nodes_", soil_type, ".pdf", sep = ""))
hybrid_tsm = T
file_string = ifelse(hybrid_tsm == TRUE,
paste("ET_estimates_nodes_hybrid_", soil_type, ".pdf", sep = ""),
paste("ET_estimates_nodes_", soil_type, ".pdf", sep = ""))
file_string
source('~/Hydrus1D/Rscripts/et_from_tsm.R')
source('~/Hydrus1D/Rscripts/et_from_tsm.R')
source('~/Hydrus1D/Rscripts/et_from_tsm.R')
source('~/Hydrus1D/Rscripts/et_from_tsm.R')
source('~/Hydrus1D/Rscripts/et_from_tsm.R')
source('~/Hydrus1D/Rscripts/calculate_tsm.R')
head(tsm_compiled)
source('~/Hydrus1D/Rscripts/et_from_tsm.R')
head(tsm_data)
head(et_pred)
head(tsm_data)
plot(tsm_data$X20)
head(tsm_compiled)
plot(tsm_compiled$`1`)
plot(tsm_compiled$`2`)
plot(tsm_compiled$`5`)
library(chron)
compiled_output_path = file.path(main_output_path, "compiled_outputs")
Z = 400
dz = 1
tstep = 0.25
tMax = 960
library(data.table)
library(readr)
# source(file.path(rootPath, "hydrusR", "create_hydrus_input.R"))
wt_data = read.csv(file.path(compiled_output_path,
paste("wtable_", soil_type, ".txt", sep = "")), header = T)
out_files = list.files(compiled_output_path)
allout_file = out_files[grep("_smc_all_", out_files)]
all_smc = read_csv(file = file.path(compiled_output_path, allout_file))
# all_smc = data.table::fread(input = file.path(compiled_output_path, allout_file), header = TRUE)
all_smc = data.table(all_smc)
zmax_rows =  all_smc[Node == max(Node)]
# all_smc[,Time:= NULL, ]
Nodes = all_smc[, Node]
Depths = unique(abs(all_smc[, Depth]))
all_smc[, Node:= NULL, ]
all_smc[, Depth:= NULL, ]
dup = function(x) {
dp =  which(duplicated(x$Time) == TRUE)
return(x[!dp])
}
all_smc_split = split(all_smc, f = Nodes)
smc_split2 = lapply(X = all_smc_split, FUN = dup)
smc_split2 = lapply(X = smc_split2, FUN = function(x) x[, Time:= NULL, ])
smc_cbind = do.call("cbind", smc_split2)
colnames(smc_cbind) = as.character(Depths)
smc_cbind[, `0`:= NULL, ]
smc_cbind = data.frame(smc_cbind, check.names = F)
# all_smc = all_smc[, 1:zmax_col]
tsm_all = apply(smc_cbind, MARGIN = 1, FUN = tsm_trapz,
nodes = as.numeric(Depths[-1]))
# tsm_all = numeric(nrow(all_smc))
# for(t in 1:length(tsm_all)) {
#       nodes_num = as.numeric(names(all_smc[, 2:ncol(all_smc)]))
#       tsm_all[t] = tsm_trapz(nodes = nodes_num,
#              smc = as.numeric(all_smc[t, 2:ncol(all_smc)]))
#       print(t)
# }
tsm_list = vector("list", length = length(node_widths)+1)
tsm_list[[1]] = tsm_all
names(tsm_list) = c(dz, node_widths)
n = 1
str_ind = paste("_", node_widths[n], "cm", sep = "")
node_n = grep(str_ind, out_files)
outfiles_n = out_files[node_n]
allout_file = outfiles_n[grep("_smc_all_", outfiles_n)]
obsnodes_file = outfiles_n[grep("_smc_obs_", outfiles_n)]
# obsnodes_smc = fread(file.path(compiled_output_path, obsnodes_file),
#                                 sep = ",", header = T)
obsnodes_smc = read_csv(file.path(compiled_output_path, obsnodes_file),
col_names = T)
obsnodes_smc = obsnodes_smc[!duplicated(obsnodes_smc$Time), ]
obsnodes_smc$Time = as.numeric(sprintf("%.3f", obsnodes_smc$Time))
tstep = diff(obsnodes_smc$Time)
tstep = max(tstep)
rem_time = obsnodes_smc$Time%%tstep
obsnodes_smc = obsnodes_smc[rem_time ==0, ]
head(obsnodes_smc)
head(obsnodes_smc[, 1:10])
cols = names(obsnodes_smc)
names(obsnodes_smc) = gsub(pattern = "theta_", replacement = "", cols)
cols_numeric = as.numeric(names(obsnodes_smc))[-1]
cols_numeric
head(obsnodes_smc[, 1:10])
cols_numeric
tsm_obsnodes = apply(obsnodes_smc, MARGIN = 1, FUN = tsm_trapz,
nodes = cols_numeric)
head(tsm_obsnodes)
plot(tsm_obsnodes[1:200])
plot(tsm_obsnodes[1:400])
plot(obsnodes_smc[, 1])
plot(obsnodes_smc[, 2])
plot(obsnodes_smc[, 3])
plot(obsnodes_smc[, 4])
plot(obsnodes_smc[, 5])
plot(obsnodes_smc[, 6])
plot(obsnodes_smc[, 7])
plot(obsnodes_smc[, 10])
cols_numeric
tsm_trapz
head(obsnodes_smc)
tsm_obsnodes = apply(obsnodes_smc[, -1], MARGIN = 1, FUN = tsm_trapz,
nodes = cols_numeric)
head(tsm_obsnodes)
plot(tsm_obsnodes[1:200])
source('~/Hydrus1D/Rscripts/calculate_tsm.R')
source('~/Hydrus1D/Rscripts/et_from_tsm.R')
col = trans.color("dodgerblue", 0.3),
col = et_pred$wt_avg,
main = '1cm',
xlab = "observed ET (cm)", ylab = "Predicted ET (cm)", ylim = range(et_pred$eta),
xlim = range(et_pred$eta))
plot(et_pred$eta, et_pred$X1, pch = 16,
# col = trans.color("dodgerblue", 0.3),
col = et_pred$wt_avg,
main = '1cm',
xlab = "observed ET (cm)", ylab = "Predicted ET (cm)", ylim = range(et_pred$eta),
xlim = range(et_pred$eta))
head(et_pred)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
gplot(data = et_pred, aes(x = eta, color = wt_avg)) +
geom_point(aes(y = X1), size = 2) + theme_bw(base_size = 14)
ggplot(data = et_pred, aes(x = eta, color = wt_avg)) +
geom_point(aes(y = X1), size = 2) + theme_bw(base_size = 14)
ggplot(data = et_pred, aes(x = eta, color = wt_avg)) +
geom_point(aes(y = X5), size = 2) + theme_bw(base_size = 14)
ggplot(data = et_pred, aes(x = eta, color = wt_avg)) +
geom_point(aes(y = X5), size = 2) + theme_bw(base_size = 14) +
geom_abline(intercept = 0, slope = 1)
ggplot(data = et_pred, aes(x = eta, color = wt_avg)) +
geom_point(aes(y = X5), size = 2) + theme_bw(base_size = 14) +
geom_abline(intercept = 0, slope = 1, color = "red", size =1.05)
soils_list
soil_data
source('~/Hydrus1D/Rscripts/source_main.R')
source('~/Hydrus1D/Rscripts/source_main.R')
warnings()
soil.i
source('~/Hydrus1D/Rscripts/et_from_tsm.R')
update.packages()
install.packages("data.table")
library(hydrusR)
?hydrusR
call.H1D
?call.H1D
help(call.H1D)
et.hourly
write.atmosph.in
source('C:/Users/Subodh/Google Drive/R/RPackages/hydrusR/R/write_atmosph_in.R', echo=TRUE)
